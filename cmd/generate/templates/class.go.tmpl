{{ $view := . }}{{ $API := $view.API -}}
package godot

import (
    "reflect"

	"github.com/Woellchen/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

{{/* Generate any enums that are part of this API */}}
{{ if $API.Enums -}}
	{{ range $i, $enum := $API.Enums -}}
		// {{ $API.Name }}{{ $enum.Name }} is an enum for {{ $enum.Name }} values.
		type {{ $API.Name }}{{ $enum.Name }} int

		const (
		{{ range $name, $value := $enum.Values -}}
			{{ $API.Name }}{{ $view.GoName $name }} {{ $API.Name }}{{ $enum.Name }} = {{ $value }}
		{{ end -}}
		)
	{{ end -}}
{{ end -}}

{{/* Generate constructors so we can build the types from a gdnative Pointer */}}
//func New{{ $view.SetClassName $API.Name $API.Singleton}}FromPointer(ptr gdnative.Pointer) {{ $view.SetClassName $API.Name $API.Singleton }} {
func new{{ $view.GoValue $API.Name }}FromPointer(ptr gdnative.Pointer) {{ $view.SetClassName $API.Name $API.Singleton }} {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := {{ $view.SetClassName $API.Name $API.Singleton }}{}
	obj.SetBaseObject(owner)

	return obj
}

{{ if $API.Singleton -}}
    func newSingleton{{ $view.GoClassName $API.Name }}() *{{ $view.SetClassName $API.Name $API.Singleton}} {
        return &{{ $view.SetClassName $API.Name $API.Singleton }}{}
    }
    /*
    {{ $view.ClassDoc $API.Name }}
    */
    var {{ $view.GoClassName $API.Name }} = newSingleton{{ $view.GoClassName $API.Name }}()
{{ end }}
/*
{{ $view.ClassDoc $API.Name }}
*/
type {{ $view.SetClassName $API.Name $API.Singleton }} struct {
    {{ if ne $API.Name "Object" }}
	{{ $view.SetBaseClassName $API.BaseClass }}
    {{ end -}}
    owner gdnative.Object
    {{ if $API.Singleton -}}
	initialized bool
    {{ end -}}
}

{{/* Singletons need to check if they've been fetched before. -*/}}
{{ if $API.Singleton -}}
    // EnsureSingleton will check to see if we have an object for it. If not, it will fetch its
    // GDNative object and set it.
    func (o *{{ $view.SetClassName $API.Name $API.Singleton }}) ensureSingleton() {
        if o.initialized == true {
		return
	}
	//log.Println("Singleton not found. Fetching from GDNative...")
    	base := gdnative.GetSingleton("{{ $API.SingletonName }}")
	o.SetBaseObject(base)
	o.initialized = true
    }
{{ end }}

func (o *{{ $view.SetClassName $API.Name $API.Singleton }}) BaseClass() string {
    return "{{ $API.Name }}"
}

{{ if (eq $API.Name "Object") -}}
// SetBaseObject will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *{{ $view.SetClassName $API.Name $API.Singleton }}) SetBaseObject(object gdnative.Object) {
    o.owner = object
}

func (o *{{ $view.SetClassName $API.Name $API.Singleton }}) GetBaseObject() gdnative.Object {
    return o.owner
}
{{ end -}}

{{ if $API.Methods }}
    {{ range $j, $method := $API.Methods }}
        /*
        {{ $view.MethodDoc $API.Name $method.Name }}
	Args: {{ $method.Arguments }}, Returns: {{ $method.ReturnType }}
        */
	func (o *{{ $view.SetClassName $API.Name $API.Singleton }}) {{ $view.GoMethodName $method.Name }}({{ range $k, $arg := $method.Arguments }}{{ $view.GoArgName $arg.Name }} {{ $view.GoValue $arg.Type }}{{ if $view.IsGodotClass $arg.Type }}Implementer{{ end }},{{ end }}{{ if $method.HasVarargs }} args ...gdnative.Variant{{ end }}) {{ if $method.ReturnType }}{{ if and ($method.HasVarargs) (ne $method.ReturnType "void") }}(gdnative.Variant, gdnative.VariantCallError){{ else if $method.HasVarargs }}gdnative.VariantCallError{{ else }}{{ $view.GoValue $method.ReturnType }}{{ if ($view.IsGodotClass $method.ReturnType) }}Implementer{{ end }}{{ end }}{{ end }} {
		{{ if $API.Singleton -}}
			o.ensureSingleton()
		{{ end -}}
                // log.Println("Calling {{ $API.Name }}.{{ $view.GoMethodName $method.Name }}()")

                // Build out the method's arguments
                {{ if $method.HasVarargs -}}
                arguments := make([]gdnative.Variant, {{ len $method.Arguments }} + len(args), {{ len $method.Arguments }} + len(args))
                {{ else -}}
                ptrArguments := make([]gdnative.Pointer, {{ len $method.Arguments }}, {{ len $method.Arguments }})
                {{ end -}}
                {{ range $k, $arg := $method.Arguments -}}
                {{ if $method.HasVarargs -}}
                    arguments[{{ $k }}] = GoTypeToVariant(reflect.ValueOf({{ $view.GoArgName $arg.Name }}))
	    	    {{ else if ($view.IsGodotClass $arg.Type) -}}
	    	        ptrArguments[{{ $k }}] = gdnative.NewPointerFromObject({{ $view.GoArgName $arg.Name }}.GetBaseObject())
	    	    {{ else -}}
	    	        ptrArguments[{{ $k }}] = gdnative.NewPointerFrom{{ $view.GoName $arg.Type }}({{ $view.GoArgName $arg.Name }})
	            {{ end -}}
                {{ end }}

                {{ if $method.HasVarargs -}}
                    for i, arg := range args {
                        arguments[i+{{ len $method.Arguments }}] = arg
                    }
                {{ end }}

	        // Get the method bind
	        methodBind := gdnative.NewMethodBind("{{ $API.Name }}", "{{ $method.Name }}")

                // Call the parent method.
	        // {{ $method.ReturnType }}
	        {{ if $method.HasVarargs -}}
	            {{ if ne $method.ReturnType "void" }}ret{{ else }}_{{ end }}, err := gdnative.MethodBindCall(methodBind, o.GetBaseObject(), arguments)
	        {{ else -}}
                retPtr := {{ $view.GoEmptyReturnType $method.ReturnType }}()
                gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)
		    {{ end }}

                {{ if $method.HasVarargs -}}
                    return {{ if ne $method.ReturnType "void" }}ret,{{ end }} err
               	{{ else if $method.ReturnType -}}
	    	    {{ $returnType := $view.GoValue $method.ReturnType }}{{ if ne $returnType "" }}
	    		// If we have a return type, convert it from a pointer into its actual object.
			{{ if $view.IsGodotClass $method.ReturnType -}}
			        ret := new{{ $view.GoNewFromPointerType $method.ReturnType }}FromPointer(retPtr)

				// Check to see if we already have an instance of this object in our Go instance registry.
				if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
					return instance.({{ $view.GoValue $method.ReturnType }}Implementer)
				}

				// Check to see what kind of class this is and create it. This is generally used with
				// GetNode().
				className := ret.GetClass()
				if className != "{{ $method.ReturnType }}" {
					actualRet := getActualClass(className, ret.GetBaseObject())
					return actualRet.({{ $view.GoValue $method.ReturnType }}Implementer)
				}

				return &ret
		        {{ else -}}
			    	ret := gdnative.New{{ $view.GoNewFromPointerType $method.ReturnType }}FromPointer(retPtr)
				{{ if $view.IsEnum $method.ReturnType -}}
					return {{ $view.GoValue $method.ReturnType }}(ret)
				{{ else -}}
	    		    		return ret
				{{ end -}}
		        {{ end -}}
                    {{ end -}}
                {{ else -}}
                    //log.Println("  Function successfully completed.")
                {{ end -}}
            }
    {{ end }}
{{ end }}

// {{ $view.GoClassName $API.Name }}Implementer is an interface that implements the methods
// of the {{ $view.GoClassName $API.Name }} class.
type {{ $view.GoClassName $API.Name }}Implementer interface {
    {{ if ne $API.Name "Object" -}}
	    {{ $view.GoClassName $API.BaseClass }}Implementer
    {{ else }}
	    Class
    {{ end -}}
	{{ if $API.Methods -}}
	    {{ range $j, $method := $API.Methods -}}
		{{/* Skip ENUM functions for now*/}}{{ if not ($view.IsEnum $method.ReturnType) -}}
			{{ if (not ($view.HasParentMethod $API.BaseClass ($view.GoMethodName $method.Name))) -}}
				{{ $view.GoMethodName $method.Name }}({{ range $k, $arg := $method.Arguments }}{{ $view.GoArgName $arg.Name }} {{ $view.GoValue $arg.Type }}{{ if $view.IsGodotClass $arg.Type }}Implementer{{ end }},{{ end }}{{ if $method.HasVarargs }} args ...gdnative.Variant{{ end }}) {{ if $method.ReturnType }}{{ if and ($method.HasVarargs) (ne $method.ReturnType "void") }}(gdnative.Variant, gdnative.VariantCallError){{ else if $method.HasVarargs }}gdnative.VariantCallError{{ else }}{{ $view.GoValue $method.ReturnType }}{{ if ($view.IsGodotClass $method.ReturnType) }}Implementer{{ end }}{{ end }}{{ end }}
			{{ end -}}
	        {{ end -}}
	    {{ end -}}
	{{ end -}}
}
