package godot

import (
	"github.com/Woellchen/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewPlaneShapeFromPointer(ptr gdnative.Pointer) PlaneShape {
func newPlaneShapeFromPointer(ptr gdnative.Pointer) PlaneShape {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := PlaneShape{}
	obj.SetBaseObject(owner)

	return obj
}

/*
An infinite plane shape for 3D collisions. Note that the [Plane]'s normal matters; anything "below" the plane will collide with it. If the [PlaneShape] is used in a [PhysicsBody], it will cause colliding objects placed "below" it to teleport "above" the plane.
*/
type PlaneShape struct {
	Shape
	owner gdnative.Object
}

func (o *PlaneShape) BaseClass() string {
	return "PlaneShape"
}

/*
        Undocumented
	Args: [], Returns: Plane
*/
func (o *PlaneShape) GetPlane() gdnative.Plane {
	//log.Println("Calling PlaneShape.GetPlane()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PlaneShape", "get_plane")

	// Call the parent method.
	// Plane
	retPtr := gdnative.NewEmptyPlane()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPlaneFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false plane Plane}], Returns: void
*/
func (o *PlaneShape) SetPlane(plane gdnative.Plane) {
	//log.Println("Calling PlaneShape.SetPlane()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromPlane(plane)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PlaneShape", "set_plane")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// PlaneShapeImplementer is an interface that implements the methods
// of the PlaneShape class.
type PlaneShapeImplementer interface {
	ShapeImplementer
	GetPlane() gdnative.Plane
	SetPlane(plane gdnative.Plane)
}
