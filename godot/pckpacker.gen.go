package godot

import (
	"github.com/Woellchen/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewPCKPackerFromPointer(ptr gdnative.Pointer) PCKPacker {
func newPCKPackerFromPointer(ptr gdnative.Pointer) PCKPacker {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := PCKPacker{}
	obj.SetBaseObject(owner)

	return obj
}

/*
The [PCKPacker] is used to create packages that can be loaded into a running project using [method ProjectSettings.load_resource_pack]. [codeblock] var packer = PCKPacker.new() packer.pck_start("test.pck") packer.add_file("res://text.txt", "text.txt") packer.flush() [/codeblock] The above [PCKPacker] creates package [code]test.pck[/code], then adds a file named [code]text.txt[/code] at the root of the package.
*/
type PCKPacker struct {
	Reference
	owner gdnative.Object
}

func (o *PCKPacker) BaseClass() string {
	return "PCKPacker"
}

/*
        Adds the [code]source_path[/code] file to the current PCK package at the [code]pck_path[/code] internal path (should start with [code]res://[/code]).
	Args: [{ false pck_path String} { false source_path String}], Returns: enum.Error
*/
func (o *PCKPacker) AddFile(pckPath gdnative.String, sourcePath gdnative.String) gdnative.Error {
	//log.Println("Calling PCKPacker.AddFile()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(pckPath)
	ptrArguments[1] = gdnative.NewPointerFromString(sourcePath)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PCKPacker", "add_file")

	// Call the parent method.
	// enum.Error
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return gdnative.Error(ret)
}

/*
        Writes the files specified using all [method add_file] calls since the last flush. If [code]verbose[/code] is [code]true[/code], a list of files added will be printed to the console for easier debugging.
	Args: [{False true verbose bool}], Returns: enum.Error
*/
func (o *PCKPacker) Flush(verbose gdnative.Bool) gdnative.Error {
	//log.Println("Calling PCKPacker.Flush()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(verbose)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PCKPacker", "flush")

	// Call the parent method.
	// enum.Error
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return gdnative.Error(ret)
}

/*
        Creates a new PCK file with the name [code]pck_name[/code]. The [code].pck[/code] file extension isn't added automatically, so it should be part of [code]pck_name[/code] (even though it's not required).
	Args: [{ false pck_name String} {0 true alignment int}], Returns: enum.Error
*/
func (o *PCKPacker) PckStart(pckName gdnative.String, alignment gdnative.Int) gdnative.Error {
	//log.Println("Calling PCKPacker.PckStart()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(pckName)
	ptrArguments[1] = gdnative.NewPointerFromInt(alignment)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PCKPacker", "pck_start")

	// Call the parent method.
	// enum.Error
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return gdnative.Error(ret)
}

// PCKPackerImplementer is an interface that implements the methods
// of the PCKPacker class.
type PCKPackerImplementer interface {
	ReferenceImplementer
}
