package godot

import (
	"github.com/Woellchen/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewPackedDataContainerFromPointer(ptr gdnative.Pointer) PackedDataContainer {
func newPackedDataContainerFromPointer(ptr gdnative.Pointer) PackedDataContainer {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := PackedDataContainer{}
	obj.SetBaseObject(owner)

	return obj
}

/*

 */
type PackedDataContainer struct {
	Resource
	owner gdnative.Object
}

func (o *PackedDataContainer) BaseClass() string {
	return "PackedDataContainer"
}

/*
        Undocumented
	Args: [], Returns: PoolByteArray
*/
func (o *PackedDataContainer) X_GetData() gdnative.PoolByteArray {
	// log.Println("Calling PackedDataContainer.X_GetData()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PackedDataContainer", "_get_data")

	// Call the parent method.
	// PoolByteArray
	retPtr := gdnative.NewEmptyPoolByteArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolByteArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false arg0 Variant}], Returns: Variant
*/
func (o *PackedDataContainer) X_IterGet(arg0 gdnative.Variant) gdnative.Variant {
	// log.Println("Calling PackedDataContainer.X_IterGet()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVariant(arg0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PackedDataContainer", "_iter_get")

	// Call the parent method.
	// Variant
	retPtr := gdnative.NewEmptyVariant()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVariantFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false arg0 Array}], Returns: Variant
*/
func (o *PackedDataContainer) X_IterInit(arg0 gdnative.Array) gdnative.Variant {
	// log.Println("Calling PackedDataContainer.X_IterInit()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromArray(arg0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PackedDataContainer", "_iter_init")

	// Call the parent method.
	// Variant
	retPtr := gdnative.NewEmptyVariant()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVariantFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false arg0 Array}], Returns: Variant
*/
func (o *PackedDataContainer) X_IterNext(arg0 gdnative.Array) gdnative.Variant {
	// log.Println("Calling PackedDataContainer.X_IterNext()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromArray(arg0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PackedDataContainer", "_iter_next")

	// Call the parent method.
	// Variant
	retPtr := gdnative.NewEmptyVariant()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVariantFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false arg0 PoolByteArray}], Returns: void
*/
func (o *PackedDataContainer) X_SetData(arg0 gdnative.PoolByteArray) {
	// log.Println("Calling PackedDataContainer.X_SetData()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromPoolByteArray(arg0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PackedDataContainer", "_set_data")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false value Variant}], Returns: enum.Error
*/
func (o *PackedDataContainer) Pack(value gdnative.Variant) gdnative.Error {
	// log.Println("Calling PackedDataContainer.Pack()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVariant(value)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PackedDataContainer", "pack")

	// Call the parent method.
	// enum.Error
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return gdnative.Error(ret)
}

/*

	Args: [], Returns: int
*/
func (o *PackedDataContainer) Size() gdnative.Int {
	// log.Println("Calling PackedDataContainer.Size()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PackedDataContainer", "size")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

// PackedDataContainerImplementer is an interface that implements the methods
// of the PackedDataContainer class.
type PackedDataContainerImplementer interface {
	ResourceImplementer
	X_GetData() gdnative.PoolByteArray
	X_IterGet(arg0 gdnative.Variant) gdnative.Variant
	X_IterInit(arg0 gdnative.Array) gdnative.Variant
	X_IterNext(arg0 gdnative.Array) gdnative.Variant
	X_SetData(arg0 gdnative.PoolByteArray)
	Size() gdnative.Int
}
