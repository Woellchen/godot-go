package godot

import (
	"github.com/Woellchen/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewCharFXTransformFromPointer(ptr gdnative.Pointer) CharFXTransform {
func newCharFXTransformFromPointer(ptr gdnative.Pointer) CharFXTransform {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := CharFXTransform{}
	obj.SetBaseObject(owner)

	return obj
}

/*
By setting various properties on this object, you can control how individual characters will be displayed in a [RichTextEffect].
*/
type CharFXTransform struct {
	Reference
	owner gdnative.Object
}

func (o *CharFXTransform) BaseClass() string {
	return "CharFXTransform"
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *CharFXTransform) GetAbsoluteIndex() gdnative.Int {
	// log.Println("Calling CharFXTransform.GetAbsoluteIndex()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CharFXTransform", "get_absolute_index")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *CharFXTransform) GetCharacter() gdnative.Int {
	// log.Println("Calling CharFXTransform.GetCharacter()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CharFXTransform", "get_character")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Color
*/
func (o *CharFXTransform) GetColor() gdnative.Color {
	// log.Println("Calling CharFXTransform.GetColor()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CharFXTransform", "get_color")

	// Call the parent method.
	// Color
	retPtr := gdnative.NewEmptyColor()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewColorFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *CharFXTransform) GetElapsedTime() gdnative.Real {
	// log.Println("Calling CharFXTransform.GetElapsedTime()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CharFXTransform", "get_elapsed_time")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Dictionary
*/
func (o *CharFXTransform) GetEnvironment() gdnative.Dictionary {
	// log.Println("Calling CharFXTransform.GetEnvironment()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CharFXTransform", "get_environment")

	// Call the parent method.
	// Dictionary
	retPtr := gdnative.NewEmptyDictionary()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewDictionaryFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Vector2
*/
func (o *CharFXTransform) GetOffset() gdnative.Vector2 {
	// log.Println("Calling CharFXTransform.GetOffset()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CharFXTransform", "get_offset")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *CharFXTransform) GetRelativeIndex() gdnative.Int {
	// log.Println("Calling CharFXTransform.GetRelativeIndex()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CharFXTransform", "get_relative_index")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *CharFXTransform) IsVisible() gdnative.Bool {
	// log.Println("Calling CharFXTransform.IsVisible()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CharFXTransform", "is_visible")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false index int}], Returns: void
*/
func (o *CharFXTransform) SetAbsoluteIndex(index gdnative.Int) {
	// log.Println("Calling CharFXTransform.SetAbsoluteIndex()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(index)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CharFXTransform", "set_absolute_index")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false character int}], Returns: void
*/
func (o *CharFXTransform) SetCharacter(character gdnative.Int) {
	// log.Println("Calling CharFXTransform.SetCharacter()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(character)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CharFXTransform", "set_character")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false color Color}], Returns: void
*/
func (o *CharFXTransform) SetColor(color gdnative.Color) {
	// log.Println("Calling CharFXTransform.SetColor()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromColor(color)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CharFXTransform", "set_color")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false time float}], Returns: void
*/
func (o *CharFXTransform) SetElapsedTime(time gdnative.Real) {
	// log.Println("Calling CharFXTransform.SetElapsedTime()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(time)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CharFXTransform", "set_elapsed_time")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false environment Dictionary}], Returns: void
*/
func (o *CharFXTransform) SetEnvironment(environment gdnative.Dictionary) {
	// log.Println("Calling CharFXTransform.SetEnvironment()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromDictionary(environment)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CharFXTransform", "set_environment")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false offset Vector2}], Returns: void
*/
func (o *CharFXTransform) SetOffset(offset gdnative.Vector2) {
	// log.Println("Calling CharFXTransform.SetOffset()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector2(offset)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CharFXTransform", "set_offset")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false index int}], Returns: void
*/
func (o *CharFXTransform) SetRelativeIndex(index gdnative.Int) {
	// log.Println("Calling CharFXTransform.SetRelativeIndex()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(index)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CharFXTransform", "set_relative_index")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false visibility bool}], Returns: void
*/
func (o *CharFXTransform) SetVisibility(visibility gdnative.Bool) {
	// log.Println("Calling CharFXTransform.SetVisibility()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(visibility)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CharFXTransform", "set_visibility")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// CharFXTransformImplementer is an interface that implements the methods
// of the CharFXTransform class.
type CharFXTransformImplementer interface {
	ReferenceImplementer
	GetAbsoluteIndex() gdnative.Int
	GetCharacter() gdnative.Int
	GetColor() gdnative.Color
	GetElapsedTime() gdnative.Real
	GetEnvironment() gdnative.Dictionary
	GetOffset() gdnative.Vector2
	GetRelativeIndex() gdnative.Int
	IsVisible() gdnative.Bool
	SetAbsoluteIndex(index gdnative.Int)
	SetCharacter(character gdnative.Int)
	SetColor(color gdnative.Color)
	SetElapsedTime(time gdnative.Real)
	SetEnvironment(environment gdnative.Dictionary)
	SetOffset(offset gdnative.Vector2)
	SetRelativeIndex(index gdnative.Int)
	SetVisibility(visibility gdnative.Bool)
}
