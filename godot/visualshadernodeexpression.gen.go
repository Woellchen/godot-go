package godot

import (
	"github.com/Woellchen/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewVisualShaderNodeExpressionFromPointer(ptr gdnative.Pointer) VisualShaderNodeExpression {
func newVisualShaderNodeExpressionFromPointer(ptr gdnative.Pointer) VisualShaderNodeExpression {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := VisualShaderNodeExpression{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Custom Godot Shading Language expression, with a custom amount of input and output ports. The provided code is directly injected into the graph's matching shader function ([code]vertex[/code], [code]fragment[/code], or [code]light[/code]), so it cannot be used to to declare functions, varyings, uniforms, or global constants. See [VisualShaderNodeGlobalExpression] for such global definitions.
*/
type VisualShaderNodeExpression struct {
	VisualShaderNodeGroupBase
	owner gdnative.Object
}

func (o *VisualShaderNodeExpression) BaseClass() string {
	return "VisualShaderNodeExpression"
}

/*
        Undocumented
	Args: [], Returns: String
*/
func (o *VisualShaderNodeExpression) GetExpression() gdnative.String {
	//log.Println("Calling VisualShaderNodeExpression.GetExpression()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeExpression", "get_expression")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false expression String}], Returns: void
*/
func (o *VisualShaderNodeExpression) SetExpression(expression gdnative.String) {
	//log.Println("Calling VisualShaderNodeExpression.SetExpression()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(expression)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeExpression", "set_expression")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// VisualShaderNodeExpressionImplementer is an interface that implements the methods
// of the VisualShaderNodeExpression class.
type VisualShaderNodeExpressionImplementer interface {
	VisualShaderNodeGroupBaseImplementer
	GetExpression() gdnative.String
	SetExpression(expression gdnative.String)
}
