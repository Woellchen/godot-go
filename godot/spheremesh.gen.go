package godot

import (
	"github.com/Woellchen/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewSphereMeshFromPointer(ptr gdnative.Pointer) SphereMesh {
func newSphereMeshFromPointer(ptr gdnative.Pointer) SphereMesh {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := SphereMesh{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Class representing a spherical [PrimitiveMesh].
*/
type SphereMesh struct {
	PrimitiveMesh
	owner gdnative.Object
}

func (o *SphereMesh) BaseClass() string {
	return "SphereMesh"
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *SphereMesh) GetHeight() gdnative.Real {
	// log.Println("Calling SphereMesh.GetHeight()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SphereMesh", "get_height")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *SphereMesh) GetIsHemisphere() gdnative.Bool {
	// log.Println("Calling SphereMesh.GetIsHemisphere()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SphereMesh", "get_is_hemisphere")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *SphereMesh) GetRadialSegments() gdnative.Int {
	// log.Println("Calling SphereMesh.GetRadialSegments()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SphereMesh", "get_radial_segments")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *SphereMesh) GetRadius() gdnative.Real {
	// log.Println("Calling SphereMesh.GetRadius()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SphereMesh", "get_radius")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *SphereMesh) GetRings() gdnative.Int {
	// log.Println("Calling SphereMesh.GetRings()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SphereMesh", "get_rings")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false height float}], Returns: void
*/
func (o *SphereMesh) SetHeight(height gdnative.Real) {
	// log.Println("Calling SphereMesh.SetHeight()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(height)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SphereMesh", "set_height")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false is_hemisphere bool}], Returns: void
*/
func (o *SphereMesh) SetIsHemisphere(isHemisphere gdnative.Bool) {
	// log.Println("Calling SphereMesh.SetIsHemisphere()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(isHemisphere)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SphereMesh", "set_is_hemisphere")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false radial_segments int}], Returns: void
*/
func (o *SphereMesh) SetRadialSegments(radialSegments gdnative.Int) {
	// log.Println("Calling SphereMesh.SetRadialSegments()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(radialSegments)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SphereMesh", "set_radial_segments")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false radius float}], Returns: void
*/
func (o *SphereMesh) SetRadius(radius gdnative.Real) {
	// log.Println("Calling SphereMesh.SetRadius()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(radius)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SphereMesh", "set_radius")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false rings int}], Returns: void
*/
func (o *SphereMesh) SetRings(rings gdnative.Int) {
	// log.Println("Calling SphereMesh.SetRings()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(rings)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SphereMesh", "set_rings")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// SphereMeshImplementer is an interface that implements the methods
// of the SphereMesh class.
type SphereMeshImplementer interface {
	PrimitiveMeshImplementer
	GetHeight() gdnative.Real
	GetIsHemisphere() gdnative.Bool
	GetRadialSegments() gdnative.Int
	GetRadius() gdnative.Real
	GetRings() gdnative.Int
	SetHeight(height gdnative.Real)
	SetIsHemisphere(isHemisphere gdnative.Bool)
	SetRadialSegments(radialSegments gdnative.Int)
	SetRadius(radius gdnative.Real)
	SetRings(rings gdnative.Int)
}
