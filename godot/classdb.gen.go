package godot

import (
	"github.com/Woellchen/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewclassDbFromPointer(ptr gdnative.Pointer) classDb {
func new_ClassDBFromPointer(ptr gdnative.Pointer) classDb {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := classDb{}
	obj.SetBaseObject(owner)

	return obj
}

func newSingletonClassDB() *classDb {
	return &classDb{}
}

/*
   Provides access to metadata stored for every available class.
*/
var ClassDB = newSingletonClassDB()

/*
Provides access to metadata stored for every available class.
*/
type classDb struct {
	Object
	owner       gdnative.Object
	initialized bool
}

// EnsureSingleton will check to see if we have an object for it. If not, it will fetch its
// GDNative object and set it.
func (o *classDb) ensureSingleton() {
	if o.initialized == true {
		return
	}
	//log.Println("Singleton not found. Fetching from GDNative...")
	base := gdnative.GetSingleton("ClassDB")
	o.SetBaseObject(base)
	o.initialized = true
}

func (o *classDb) BaseClass() string {
	return "_ClassDB"
}

/*
        Undocumented
	Args: [{ false class String}], Returns: bool
*/
func (o *classDb) CanInstance(class gdnative.String) gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling _ClassDB.CanInstance()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(class)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_ClassDB", "can_instance")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false class String}], Returns: bool
*/
func (o *classDb) ClassExists(class gdnative.String) gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling _ClassDB.ClassExists()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(class)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_ClassDB", "class_exists")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false class String}], Returns: String
*/
func (o *classDb) ClassGetCategory(class gdnative.String) gdnative.String {
	o.ensureSingleton()
	//log.Println("Calling _ClassDB.ClassGetCategory()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(class)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_ClassDB", "class_get_category")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false class String} { false name String}], Returns: int
*/
func (o *classDb) ClassGetIntegerConstant(class gdnative.String, name gdnative.String) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling _ClassDB.ClassGetIntegerConstant()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(class)
	ptrArguments[1] = gdnative.NewPointerFromString(name)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_ClassDB", "class_get_integer_constant")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false class String} {False true no_inheritance bool}], Returns: PoolStringArray
*/
func (o *classDb) ClassGetIntegerConstantList(class gdnative.String, noInheritance gdnative.Bool) gdnative.PoolStringArray {
	o.ensureSingleton()
	//log.Println("Calling _ClassDB.ClassGetIntegerConstantList()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(class)
	ptrArguments[1] = gdnative.NewPointerFromBool(noInheritance)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_ClassDB", "class_get_integer_constant_list")

	// Call the parent method.
	// PoolStringArray
	retPtr := gdnative.NewEmptyPoolStringArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolStringArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false class String} {False true no_inheritance bool}], Returns: Array
*/
func (o *classDb) ClassGetMethodList(class gdnative.String, noInheritance gdnative.Bool) gdnative.Array {
	o.ensureSingleton()
	//log.Println("Calling _ClassDB.ClassGetMethodList()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(class)
	ptrArguments[1] = gdnative.NewPointerFromBool(noInheritance)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_ClassDB", "class_get_method_list")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false object Object} { false property String}], Returns: Variant
*/
func (o *classDb) ClassGetProperty(object ObjectImplementer, property gdnative.String) gdnative.Variant {
	o.ensureSingleton()
	//log.Println("Calling _ClassDB.ClassGetProperty()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromObject(object.GetBaseObject())
	ptrArguments[1] = gdnative.NewPointerFromString(property)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_ClassDB", "class_get_property")

	// Call the parent method.
	// Variant
	retPtr := gdnative.NewEmptyVariant()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVariantFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false class String} {False true no_inheritance bool}], Returns: Array
*/
func (o *classDb) ClassGetPropertyList(class gdnative.String, noInheritance gdnative.Bool) gdnative.Array {
	o.ensureSingleton()
	//log.Println("Calling _ClassDB.ClassGetPropertyList()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(class)
	ptrArguments[1] = gdnative.NewPointerFromBool(noInheritance)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_ClassDB", "class_get_property_list")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false class String} { false signal String}], Returns: Dictionary
*/
func (o *classDb) ClassGetSignal(class gdnative.String, signal gdnative.String) gdnative.Dictionary {
	o.ensureSingleton()
	//log.Println("Calling _ClassDB.ClassGetSignal()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(class)
	ptrArguments[1] = gdnative.NewPointerFromString(signal)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_ClassDB", "class_get_signal")

	// Call the parent method.
	// Dictionary
	retPtr := gdnative.NewEmptyDictionary()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewDictionaryFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false class String} {False true no_inheritance bool}], Returns: Array
*/
func (o *classDb) ClassGetSignalList(class gdnative.String, noInheritance gdnative.Bool) gdnative.Array {
	o.ensureSingleton()
	//log.Println("Calling _ClassDB.ClassGetSignalList()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(class)
	ptrArguments[1] = gdnative.NewPointerFromBool(noInheritance)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_ClassDB", "class_get_signal_list")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false class String} { false name String}], Returns: bool
*/
func (o *classDb) ClassHasIntegerConstant(class gdnative.String, name gdnative.String) gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling _ClassDB.ClassHasIntegerConstant()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(class)
	ptrArguments[1] = gdnative.NewPointerFromString(name)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_ClassDB", "class_has_integer_constant")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false class String} { false method String} {False true no_inheritance bool}], Returns: bool
*/
func (o *classDb) ClassHasMethod(class gdnative.String, method gdnative.String, noInheritance gdnative.Bool) gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling _ClassDB.ClassHasMethod()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromString(class)
	ptrArguments[1] = gdnative.NewPointerFromString(method)
	ptrArguments[2] = gdnative.NewPointerFromBool(noInheritance)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_ClassDB", "class_has_method")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false class String} { false signal String}], Returns: bool
*/
func (o *classDb) ClassHasSignal(class gdnative.String, signal gdnative.String) gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling _ClassDB.ClassHasSignal()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(class)
	ptrArguments[1] = gdnative.NewPointerFromString(signal)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_ClassDB", "class_has_signal")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false object Object} { false property String} { false value Variant}], Returns: enum.Error
*/
func (o *classDb) ClassSetProperty(object ObjectImplementer, property gdnative.String, value gdnative.Variant) gdnative.Error {
	o.ensureSingleton()
	//log.Println("Calling _ClassDB.ClassSetProperty()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromObject(object.GetBaseObject())
	ptrArguments[1] = gdnative.NewPointerFromString(property)
	ptrArguments[2] = gdnative.NewPointerFromVariant(value)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_ClassDB", "class_set_property")

	// Call the parent method.
	// enum.Error
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return gdnative.Error(ret)
}

/*
        Undocumented
	Args: [], Returns: PoolStringArray
*/
func (o *classDb) GetClassList() gdnative.PoolStringArray {
	o.ensureSingleton()
	//log.Println("Calling _ClassDB.GetClassList()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_ClassDB", "get_class_list")

	// Call the parent method.
	// PoolStringArray
	retPtr := gdnative.NewEmptyPoolStringArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolStringArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false class String}], Returns: PoolStringArray
*/
func (o *classDb) GetInheritersFromClass(class gdnative.String) gdnative.PoolStringArray {
	o.ensureSingleton()
	//log.Println("Calling _ClassDB.GetInheritersFromClass()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(class)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_ClassDB", "get_inheriters_from_class")

	// Call the parent method.
	// PoolStringArray
	retPtr := gdnative.NewEmptyPoolStringArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolStringArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false class String}], Returns: String
*/
func (o *classDb) GetParentClass(class gdnative.String) gdnative.String {
	o.ensureSingleton()
	//log.Println("Calling _ClassDB.GetParentClass()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(class)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_ClassDB", "get_parent_class")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false class String}], Returns: Variant
*/
func (o *classDb) Instance(class gdnative.String) gdnative.Variant {
	o.ensureSingleton()
	//log.Println("Calling _ClassDB.Instance()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(class)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_ClassDB", "instance")

	// Call the parent method.
	// Variant
	retPtr := gdnative.NewEmptyVariant()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVariantFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false class String}], Returns: bool
*/
func (o *classDb) IsClassEnabled(class gdnative.String) gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling _ClassDB.IsClassEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(class)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_ClassDB", "is_class_enabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false class String} { false inherits String}], Returns: bool
*/
func (o *classDb) IsParentClass(class gdnative.String, inherits gdnative.String) gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling _ClassDB.IsParentClass()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(class)
	ptrArguments[1] = gdnative.NewPointerFromString(inherits)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_ClassDB", "is_parent_class")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

// ClassDBImplementer is an interface that implements the methods
// of the ClassDB class.
type ClassDBImplementer interface {
	ObjectImplementer
	CanInstance(class gdnative.String) gdnative.Bool
	ClassExists(class gdnative.String) gdnative.Bool
	ClassGetCategory(class gdnative.String) gdnative.String
	ClassGetIntegerConstant(class gdnative.String, name gdnative.String) gdnative.Int
	ClassGetIntegerConstantList(class gdnative.String, noInheritance gdnative.Bool) gdnative.PoolStringArray
	ClassGetMethodList(class gdnative.String, noInheritance gdnative.Bool) gdnative.Array
	ClassGetProperty(object ObjectImplementer, property gdnative.String) gdnative.Variant
	ClassGetPropertyList(class gdnative.String, noInheritance gdnative.Bool) gdnative.Array
	ClassGetSignal(class gdnative.String, signal gdnative.String) gdnative.Dictionary
	ClassGetSignalList(class gdnative.String, noInheritance gdnative.Bool) gdnative.Array
	ClassHasIntegerConstant(class gdnative.String, name gdnative.String) gdnative.Bool
	ClassHasMethod(class gdnative.String, method gdnative.String, noInheritance gdnative.Bool) gdnative.Bool
	ClassHasSignal(class gdnative.String, signal gdnative.String) gdnative.Bool
	GetClassList() gdnative.PoolStringArray
	GetInheritersFromClass(class gdnative.String) gdnative.PoolStringArray
	GetParentClass(class gdnative.String) gdnative.String
	Instance(class gdnative.String) gdnative.Variant
	IsClassEnabled(class gdnative.String) gdnative.Bool
	IsParentClass(class gdnative.String, inherits gdnative.String) gdnative.Bool
}
