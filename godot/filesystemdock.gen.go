package godot

import (
	"github.com/Woellchen/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewFileSystemDockFromPointer(ptr gdnative.Pointer) FileSystemDock {
func newFileSystemDockFromPointer(ptr gdnative.Pointer) FileSystemDock {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := FileSystemDock{}
	obj.SetBaseObject(owner)

	return obj
}

/*

 */
type FileSystemDock struct {
	VBoxContainer
	owner gdnative.Object
}

func (o *FileSystemDock) BaseClass() string {
	return "FileSystemDock"
}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *FileSystemDock) X_BwHistory() {
	// log.Println("Calling FileSystemDock.X_BwHistory()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileSystemDock", "_bw_history")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *FileSystemDock) X_DuplicateOperationConfirm() {
	// log.Println("Calling FileSystemDock.X_DuplicateOperationConfirm()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileSystemDock", "_duplicate_operation_confirm")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *FileSystemDock) X_FeatureProfileChanged() {
	// log.Println("Calling FileSystemDock.X_FeatureProfileChanged()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileSystemDock", "_feature_profile_changed")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 int}], Returns: void
*/
func (o *FileSystemDock) X_FileListActivateFile(arg0 gdnative.Int) {
	// log.Println("Calling FileSystemDock.X_FileListActivateFile()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(arg0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileSystemDock", "_file_list_activate_file")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 InputEvent}], Returns: void
*/
func (o *FileSystemDock) X_FileListGuiInput(arg0 InputEventImplementer) {
	// log.Println("Calling FileSystemDock.X_FileListGuiInput()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(arg0.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileSystemDock", "_file_list_gui_input")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false option int}], Returns: void
*/
func (o *FileSystemDock) X_FileListRmbOption(option gdnative.Int) {
	// log.Println("Calling FileSystemDock.X_FileListRmbOption()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(option)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileSystemDock", "_file_list_rmb_option")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 Vector2}], Returns: void
*/
func (o *FileSystemDock) X_FileListRmbPressed(arg0 gdnative.Vector2) {
	// log.Println("Calling FileSystemDock.X_FileListRmbPressed()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector2(arg0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileSystemDock", "_file_list_rmb_pressed")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 int} { false arg1 Vector2}], Returns: void
*/
func (o *FileSystemDock) X_FileListRmbSelect(arg0 gdnative.Int, arg1 gdnative.Vector2) {
	// log.Println("Calling FileSystemDock.X_FileListRmbSelect()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(arg0)
	ptrArguments[1] = gdnative.NewPointerFromVector2(arg1)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileSystemDock", "_file_list_rmb_select")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 String} { false arg1 Texture} { false arg2 Texture} { false arg3 Variant}], Returns: void
*/
func (o *FileSystemDock) X_FileListThumbnailDone(arg0 gdnative.String, arg1 TextureImplementer, arg2 TextureImplementer, arg3 gdnative.Variant) {
	// log.Println("Calling FileSystemDock.X_FileListThumbnailDone()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromString(arg0)
	ptrArguments[1] = gdnative.NewPointerFromObject(arg1.GetBaseObject())
	ptrArguments[2] = gdnative.NewPointerFromObject(arg2.GetBaseObject())
	ptrArguments[3] = gdnative.NewPointerFromVariant(arg3)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileSystemDock", "_file_list_thumbnail_done")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 int} { false arg1 bool}], Returns: void
*/
func (o *FileSystemDock) X_FileMultiSelected(arg0 gdnative.Int, arg1 gdnative.Bool) {
	// log.Println("Calling FileSystemDock.X_FileMultiSelected()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(arg0)
	ptrArguments[1] = gdnative.NewPointerFromBool(arg1)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileSystemDock", "_file_multi_selected")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 String}], Returns: void
*/
func (o *FileSystemDock) X_FileRemoved(arg0 gdnative.String) {
	// log.Println("Calling FileSystemDock.X_FileRemoved()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(arg0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileSystemDock", "_file_removed")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 String}], Returns: void
*/
func (o *FileSystemDock) X_FolderRemoved(arg0 gdnative.String) {
	// log.Println("Calling FileSystemDock.X_FolderRemoved()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(arg0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileSystemDock", "_folder_removed")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *FileSystemDock) X_FsChanged() {
	// log.Println("Calling FileSystemDock.X_FsChanged()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileSystemDock", "_fs_changed")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *FileSystemDock) X_FwHistory() {
	// log.Println("Calling FileSystemDock.X_FwHistory()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileSystemDock", "_fw_history")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *FileSystemDock) X_MakeDirConfirm() {
	// log.Println("Calling FileSystemDock.X_MakeDirConfirm()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileSystemDock", "_make_dir_confirm")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *FileSystemDock) X_MakeSceneConfirm() {
	// log.Println("Calling FileSystemDock.X_MakeSceneConfirm()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileSystemDock", "_make_scene_confirm")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false to_path String} {False true overwrite bool}], Returns: void
*/
func (o *FileSystemDock) X_MoveOperationConfirm(toPath gdnative.String, overwrite gdnative.Bool) {
	// log.Println("Calling FileSystemDock.X_MoveOperationConfirm()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(toPath)
	ptrArguments[1] = gdnative.NewPointerFromBool(overwrite)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileSystemDock", "_move_operation_confirm")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *FileSystemDock) X_MoveWithOverwrite() {
	// log.Println("Calling FileSystemDock.X_MoveWithOverwrite()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileSystemDock", "_move_with_overwrite")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 String} {False true arg1 bool}], Returns: void
*/
func (o *FileSystemDock) X_NavigateToPath(arg0 gdnative.String, arg1 gdnative.Bool) {
	// log.Println("Calling FileSystemDock.X_NavigateToPath()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(arg0)
	ptrArguments[1] = gdnative.NewPointerFromBool(arg1)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileSystemDock", "_navigate_to_path")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 String}], Returns: void
*/
func (o *FileSystemDock) X_PreviewInvalidated(arg0 gdnative.String) {
	// log.Println("Calling FileSystemDock.X_PreviewInvalidated()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(arg0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileSystemDock", "_preview_invalidated")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *FileSystemDock) X_RenameOperationConfirm() {
	// log.Println("Calling FileSystemDock.X_RenameOperationConfirm()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileSystemDock", "_rename_operation_confirm")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *FileSystemDock) X_Rescan() {
	// log.Println("Calling FileSystemDock.X_Rescan()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileSystemDock", "_rescan")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *FileSystemDock) X_ResourceCreated() {
	// log.Println("Calling FileSystemDock.X_ResourceCreated()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileSystemDock", "_resource_created")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 String} { false arg1 Control}], Returns: void
*/
func (o *FileSystemDock) X_SearchChanged(arg0 gdnative.String, arg1 ControlImplementer) {
	// log.Println("Calling FileSystemDock.X_SearchChanged()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(arg0)
	ptrArguments[1] = gdnative.NewPointerFromObject(arg1.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileSystemDock", "_search_changed")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 String} { false arg1 bool}], Returns: void
*/
func (o *FileSystemDock) X_SelectFile(arg0 gdnative.String, arg1 gdnative.Bool) {
	// log.Println("Calling FileSystemDock.X_SelectFile()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(arg0)
	ptrArguments[1] = gdnative.NewPointerFromBool(arg1)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileSystemDock", "_select_file")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *FileSystemDock) X_ToggleFileDisplay() {
	// log.Println("Calling FileSystemDock.X_ToggleFileDisplay()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileSystemDock", "_toggle_file_display")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 bool}], Returns: void
*/
func (o *FileSystemDock) X_ToggleSplitMode(arg0 gdnative.Bool) {
	// log.Println("Calling FileSystemDock.X_ToggleSplitMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(arg0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileSystemDock", "_toggle_split_mode")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *FileSystemDock) X_TreeActivateFile() {
	// log.Println("Calling FileSystemDock.X_TreeActivateFile()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileSystemDock", "_tree_activate_file")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *FileSystemDock) X_TreeEmptySelected() {
	// log.Println("Calling FileSystemDock.X_TreeEmptySelected()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileSystemDock", "_tree_empty_selected")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 InputEvent}], Returns: void
*/
func (o *FileSystemDock) X_TreeGuiInput(arg0 InputEventImplementer) {
	// log.Println("Calling FileSystemDock.X_TreeGuiInput()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(arg0.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileSystemDock", "_tree_gui_input")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 Object} { false arg1 int} { false arg2 bool}], Returns: void
*/
func (o *FileSystemDock) X_TreeMultiSelected(arg0 ObjectImplementer, arg1 gdnative.Int, arg2 gdnative.Bool) {
	// log.Println("Calling FileSystemDock.X_TreeMultiSelected()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromObject(arg0.GetBaseObject())
	ptrArguments[1] = gdnative.NewPointerFromInt(arg1)
	ptrArguments[2] = gdnative.NewPointerFromBool(arg2)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileSystemDock", "_tree_multi_selected")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 Vector2}], Returns: void
*/
func (o *FileSystemDock) X_TreeRmbEmpty(arg0 gdnative.Vector2) {
	// log.Println("Calling FileSystemDock.X_TreeRmbEmpty()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector2(arg0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileSystemDock", "_tree_rmb_empty")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false option int}], Returns: void
*/
func (o *FileSystemDock) X_TreeRmbOption(option gdnative.Int) {
	// log.Println("Calling FileSystemDock.X_TreeRmbOption()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(option)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileSystemDock", "_tree_rmb_option")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 Vector2}], Returns: void
*/
func (o *FileSystemDock) X_TreeRmbSelect(arg0 gdnative.Vector2) {
	// log.Println("Calling FileSystemDock.X_TreeRmbSelect()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector2(arg0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileSystemDock", "_tree_rmb_select")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 String} { false arg1 Texture} { false arg2 Texture} { false arg3 Variant}], Returns: void
*/
func (o *FileSystemDock) X_TreeThumbnailDone(arg0 gdnative.String, arg1 TextureImplementer, arg2 TextureImplementer, arg3 gdnative.Variant) {
	// log.Println("Calling FileSystemDock.X_TreeThumbnailDone()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromString(arg0)
	ptrArguments[1] = gdnative.NewPointerFromObject(arg1.GetBaseObject())
	ptrArguments[2] = gdnative.NewPointerFromObject(arg2.GetBaseObject())
	ptrArguments[3] = gdnative.NewPointerFromVariant(arg3)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileSystemDock", "_tree_thumbnail_done")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *FileSystemDock) X_UpdateImportDock() {
	// log.Println("Calling FileSystemDock.X_UpdateImportDock()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileSystemDock", "_update_import_dock")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 PoolStringArray} { false arg1 bool} { false arg2 bool} { false arg3 bool}], Returns: void
*/
func (o *FileSystemDock) X_UpdateTree(arg0 gdnative.PoolStringArray, arg1 gdnative.Bool, arg2 gdnative.Bool, arg3 gdnative.Bool) {
	// log.Println("Calling FileSystemDock.X_UpdateTree()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromPoolStringArray(arg0)
	ptrArguments[1] = gdnative.NewPointerFromBool(arg1)
	ptrArguments[2] = gdnative.NewPointerFromBool(arg2)
	ptrArguments[3] = gdnative.NewPointerFromBool(arg3)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileSystemDock", "_update_tree")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false arg0 Vector2} { false arg1 Variant} { false arg2 Control}], Returns: bool
*/
func (o *FileSystemDock) CanDropDataFw(arg0 gdnative.Vector2, arg1 gdnative.Variant, arg2 ControlImplementer) gdnative.Bool {
	// log.Println("Calling FileSystemDock.CanDropDataFw()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromVector2(arg0)
	ptrArguments[1] = gdnative.NewPointerFromVariant(arg1)
	ptrArguments[2] = gdnative.NewPointerFromObject(arg2.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileSystemDock", "can_drop_data_fw")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false arg0 Vector2} { false arg1 Variant} { false arg2 Control}], Returns: void
*/
func (o *FileSystemDock) DropDataFw(arg0 gdnative.Vector2, arg1 gdnative.Variant, arg2 ControlImplementer) {
	// log.Println("Calling FileSystemDock.DropDataFw()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromVector2(arg0)
	ptrArguments[1] = gdnative.NewPointerFromVariant(arg1)
	ptrArguments[2] = gdnative.NewPointerFromObject(arg2.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileSystemDock", "drop_data_fw")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false arg0 Vector2} { false arg1 Control}], Returns: Variant
*/
func (o *FileSystemDock) GetDragDataFw(arg0 gdnative.Vector2, arg1 ControlImplementer) gdnative.Variant {
	// log.Println("Calling FileSystemDock.GetDragDataFw()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromVector2(arg0)
	ptrArguments[1] = gdnative.NewPointerFromObject(arg1.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileSystemDock", "get_drag_data_fw")

	// Call the parent method.
	// Variant
	retPtr := gdnative.NewEmptyVariant()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVariantFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false arg0 String}], Returns: void
*/
func (o *FileSystemDock) NavigateToPath(arg0 gdnative.String) {
	// log.Println("Calling FileSystemDock.NavigateToPath()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(arg0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileSystemDock", "navigate_to_path")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// FileSystemDockImplementer is an interface that implements the methods
// of the FileSystemDock class.
type FileSystemDockImplementer interface {
	VBoxContainerImplementer
	X_BwHistory()
	X_DuplicateOperationConfirm()
	X_FeatureProfileChanged()
	X_FileListActivateFile(arg0 gdnative.Int)
	X_FileListGuiInput(arg0 InputEventImplementer)
	X_FileListRmbOption(option gdnative.Int)
	X_FileListRmbPressed(arg0 gdnative.Vector2)
	X_FileListRmbSelect(arg0 gdnative.Int, arg1 gdnative.Vector2)
	X_FileListThumbnailDone(arg0 gdnative.String, arg1 TextureImplementer, arg2 TextureImplementer, arg3 gdnative.Variant)
	X_FileMultiSelected(arg0 gdnative.Int, arg1 gdnative.Bool)
	X_FileRemoved(arg0 gdnative.String)
	X_FolderRemoved(arg0 gdnative.String)
	X_FsChanged()
	X_FwHistory()
	X_MakeDirConfirm()
	X_MakeSceneConfirm()
	X_MoveOperationConfirm(toPath gdnative.String, overwrite gdnative.Bool)
	X_MoveWithOverwrite()
	X_NavigateToPath(arg0 gdnative.String, arg1 gdnative.Bool)
	X_PreviewInvalidated(arg0 gdnative.String)
	X_RenameOperationConfirm()
	X_Rescan()
	X_ResourceCreated()
	X_SearchChanged(arg0 gdnative.String, arg1 ControlImplementer)
	X_SelectFile(arg0 gdnative.String, arg1 gdnative.Bool)
	X_ToggleFileDisplay()
	X_ToggleSplitMode(arg0 gdnative.Bool)
	X_TreeActivateFile()
	X_TreeEmptySelected()
	X_TreeGuiInput(arg0 InputEventImplementer)
	X_TreeMultiSelected(arg0 ObjectImplementer, arg1 gdnative.Int, arg2 gdnative.Bool)
	X_TreeRmbEmpty(arg0 gdnative.Vector2)
	X_TreeRmbOption(option gdnative.Int)
	X_TreeRmbSelect(arg0 gdnative.Vector2)
	X_TreeThumbnailDone(arg0 gdnative.String, arg1 TextureImplementer, arg2 TextureImplementer, arg3 gdnative.Variant)
	X_UpdateImportDock()
	X_UpdateTree(arg0 gdnative.PoolStringArray, arg1 gdnative.Bool, arg2 gdnative.Bool, arg3 gdnative.Bool)
	CanDropDataFw(arg0 gdnative.Vector2, arg1 gdnative.Variant, arg2 ControlImplementer) gdnative.Bool
	DropDataFw(arg0 gdnative.Vector2, arg1 gdnative.Variant, arg2 ControlImplementer)
	GetDragDataFw(arg0 gdnative.Vector2, arg1 ControlImplementer) gdnative.Variant
	NavigateToPath(arg0 gdnative.String)
}
