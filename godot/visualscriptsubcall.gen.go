package godot

import (
	"github.com/Woellchen/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewVisualScriptSubCallFromPointer(ptr gdnative.Pointer) VisualScriptSubCall {
func newVisualScriptSubCallFromPointer(ptr gdnative.Pointer) VisualScriptSubCall {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := VisualScriptSubCall{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Undocumented
*/
type VisualScriptSubCall struct {
	VisualScriptNode
	owner gdnative.Object
}

func (o *VisualScriptSubCall) BaseClass() string {
	return "VisualScriptSubCall"
}

/*
        Undocumented
	Args: [{ false arguments Variant}], Returns: Variant
*/
func (o *VisualScriptSubCall) X_Subcall(arguments gdnative.Variant) gdnative.Variant {
	// log.Println("Calling VisualScriptSubCall.X_Subcall()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVariant(arguments)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualScriptSubCall", "_subcall")

	// Call the parent method.
	// Variant
	retPtr := gdnative.NewEmptyVariant()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVariantFromPointer(retPtr)
	return ret
}

// VisualScriptSubCallImplementer is an interface that implements the methods
// of the VisualScriptSubCall class.
type VisualScriptSubCallImplementer interface {
	VisualScriptNodeImplementer
	X_Subcall(arguments gdnative.Variant) gdnative.Variant
}
