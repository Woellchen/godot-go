package godot

import (
	"github.com/Woellchen/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewVisualScriptPreloadFromPointer(ptr gdnative.Pointer) VisualScriptPreload {
func newVisualScriptPreloadFromPointer(ptr gdnative.Pointer) VisualScriptPreload {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := VisualScriptPreload{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Undocumented
*/
type VisualScriptPreload struct {
	VisualScriptNode
	owner gdnative.Object
}

func (o *VisualScriptPreload) BaseClass() string {
	return "VisualScriptPreload"
}

/*
        Undocumented
	Args: [], Returns: Resource
*/
func (o *VisualScriptPreload) GetPreload() ResourceImplementer {
	//log.Println("Calling VisualScriptPreload.GetPreload()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualScriptPreload", "get_preload")

	// Call the parent method.
	// Resource
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newResourceFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(ResourceImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Resource" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(ResourceImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [{ false resource Resource}], Returns: void
*/
func (o *VisualScriptPreload) SetPreload(resource ResourceImplementer) {
	//log.Println("Calling VisualScriptPreload.SetPreload()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(resource.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualScriptPreload", "set_preload")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// VisualScriptPreloadImplementer is an interface that implements the methods
// of the VisualScriptPreload class.
type VisualScriptPreloadImplementer interface {
	VisualScriptNodeImplementer
	GetPreload() ResourceImplementer
	SetPreload(resource ResourceImplementer)
}
