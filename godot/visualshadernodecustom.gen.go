package godot

import (
	"github.com/Woellchen/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewVisualShaderNodeCustomFromPointer(ptr gdnative.Pointer) VisualShaderNodeCustom {
func newVisualShaderNodeCustomFromPointer(ptr gdnative.Pointer) VisualShaderNodeCustom {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := VisualShaderNodeCustom{}
	obj.SetBaseObject(owner)

	return obj
}

/*
By inheriting this class you can create a custom [VisualShader] script addon which will be automatically added to the Visual Shader Editor. The [VisualShaderNode]'s behavior is defined by overriding the provided virtual methods. In order for the node to be registered as an editor addon, you must use the [code]tool[/code] keyword and provide a [code]class_name[/code] for your custom script. For example: [codeblock] tool extends VisualShaderNodeCustom class_name VisualShaderNodeNoise [/codeblock]
*/
type VisualShaderNodeCustom struct {
	VisualShaderNode
	owner gdnative.Object
}

func (o *VisualShaderNodeCustom) BaseClass() string {
	return "VisualShaderNodeCustom"
}

/*
        Override this method to define the category of the associated custom node in the Visual Shader Editor's members dialog. Defining this method is [b]optional[/b]. If not overridden, the node will be filed under the "Custom" category.
	Args: [], Returns: String
*/
func (o *VisualShaderNodeCustom) X_GetCategory() gdnative.String {
	// log.Println("Calling VisualShaderNodeCustom.X_GetCategory()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeCustom", "_get_category")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Override this method to define the actual shader code of the associated custom node. The shader code should be returned as a string, which can have multiple lines (the [code]"""[/code] multiline string construct can be used for convenience). The [code]input_vars[/code] and [code]output_vars[/code] arrays contain the string names of the various input and output variables, as defined by [code]_get_input_*[/code] and [code]_get_output_*[/code] virtual methods in this class. The output ports can be assigned values in the shader code. For example, [code]return output_vars[0] + " = " + input_vars[0] + ";"[/code]. You can customize the generated code based on the shader [code]mode[/code] (see [enum Shader.Mode]) and/or [code]type[/code] (see [enum VisualShader.Type]). Defining this method is [b]required[/b].
	Args: [{ false input_vars Array} { false output_vars Array} { false mode int} { false type int}], Returns: String
*/
func (o *VisualShaderNodeCustom) X_GetCode(inputVars gdnative.Array, outputVars gdnative.Array, mode gdnative.Int, aType gdnative.Int) gdnative.String {
	// log.Println("Calling VisualShaderNodeCustom.X_GetCode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromArray(inputVars)
	ptrArguments[1] = gdnative.NewPointerFromArray(outputVars)
	ptrArguments[2] = gdnative.NewPointerFromInt(mode)
	ptrArguments[3] = gdnative.NewPointerFromInt(aType)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeCustom", "_get_code")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Override this method to define the description of the associated custom node in the Visual Shader Editor's members dialog. Defining this method is [b]optional[/b].
	Args: [], Returns: String
*/
func (o *VisualShaderNodeCustom) X_GetDescription() gdnative.String {
	// log.Println("Calling VisualShaderNodeCustom.X_GetDescription()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeCustom", "_get_description")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Override this method to add shader code on top of the global shader, to define your own standard library of reusable methods, varyings, constants, uniforms, etc. The shader code should be returned as a string, which can have multiple lines (the [code]"""[/code] multiline string construct can be used for convenience). Be careful with this functionality as it can cause name conflicts with other custom nodes, so be sure to give the defined entities unique names. You can customize the generated code based on the shader [code]mode[/code] (see [enum Shader.Mode]). Defining this method is [b]optional[/b].
	Args: [{ false mode int}], Returns: String
*/
func (o *VisualShaderNodeCustom) X_GetGlobalCode(mode gdnative.Int) gdnative.String {
	// log.Println("Calling VisualShaderNodeCustom.X_GetGlobalCode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(mode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeCustom", "_get_global_code")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Override this method to define the amount of input ports of the associated custom node. Defining this method is [b]required[/b]. If not overridden, the node has no input ports.
	Args: [], Returns: int
*/
func (o *VisualShaderNodeCustom) X_GetInputPortCount() gdnative.Int {
	// log.Println("Calling VisualShaderNodeCustom.X_GetInputPortCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeCustom", "_get_input_port_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Override this method to define the names of input ports of the associated custom node. The names are used both for the input slots in the editor and as identifiers in the shader code, and are passed in the [code]input_vars[/code] array in [method _get_code]. Defining this method is [b]optional[/b], but recommended. If not overridden, input ports are named as [code]"in" + str(port)[/code].
	Args: [{ false port int}], Returns: String
*/
func (o *VisualShaderNodeCustom) X_GetInputPortName(port gdnative.Int) gdnative.String {
	// log.Println("Calling VisualShaderNodeCustom.X_GetInputPortName()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(port)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeCustom", "_get_input_port_name")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Override this method to define the returned type of each input port of the associated custom node (see [enum VisualShaderNode.PortType] for possible types). Defining this method is [b]optional[/b], but recommended. If not overridden, input ports will return the [constant VisualShaderNode.PORT_TYPE_SCALAR] type.
	Args: [{ false port int}], Returns: int
*/
func (o *VisualShaderNodeCustom) X_GetInputPortType(port gdnative.Int) gdnative.Int {
	// log.Println("Calling VisualShaderNodeCustom.X_GetInputPortType()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(port)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeCustom", "_get_input_port_type")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Override this method to define the name of the associated custom node in the Visual Shader Editor's members dialog and graph. Defining this method is [b]optional[/b], but recommended. If not overridden, the node will be named as "Unnamed".
	Args: [], Returns: String
*/
func (o *VisualShaderNodeCustom) X_GetName() gdnative.String {
	// log.Println("Calling VisualShaderNodeCustom.X_GetName()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeCustom", "_get_name")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Override this method to define the amount of output ports of the associated custom node. Defining this method is [b]required[/b]. If not overridden, the node has no output ports.
	Args: [], Returns: int
*/
func (o *VisualShaderNodeCustom) X_GetOutputPortCount() gdnative.Int {
	// log.Println("Calling VisualShaderNodeCustom.X_GetOutputPortCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeCustom", "_get_output_port_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Override this method to define the names of output ports of the associated custom node. The names are used both for the output slots in the editor and as identifiers in the shader code, and are passed in the [code]output_vars[/code] array in [method _get_code]. Defining this method is [b]optional[/b], but recommended. If not overridden, output ports are named as [code]"out" + str(port)[/code].
	Args: [{ false port int}], Returns: String
*/
func (o *VisualShaderNodeCustom) X_GetOutputPortName(port gdnative.Int) gdnative.String {
	// log.Println("Calling VisualShaderNodeCustom.X_GetOutputPortName()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(port)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeCustom", "_get_output_port_name")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Override this method to define the returned type of each output port of the associated custom node (see [enum VisualShaderNode.PortType] for possible types). Defining this method is [b]optional[/b], but recommended. If not overridden, output ports will return the [constant VisualShaderNode.PORT_TYPE_SCALAR] type.
	Args: [{ false port int}], Returns: int
*/
func (o *VisualShaderNodeCustom) X_GetOutputPortType(port gdnative.Int) gdnative.Int {
	// log.Println("Calling VisualShaderNodeCustom.X_GetOutputPortType()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(port)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeCustom", "_get_output_port_type")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Override this method to define the return icon of the associated custom node in the Visual Shader Editor's members dialog. Defining this method is [b]optional[/b]. If not overridden, no return icon is shown.
	Args: [], Returns: int
*/
func (o *VisualShaderNodeCustom) X_GetReturnIconType() gdnative.Int {
	// log.Println("Calling VisualShaderNodeCustom.X_GetReturnIconType()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeCustom", "_get_return_icon_type")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Override this method to define the subcategory of the associated custom node in the Visual Shader Editor's members dialog. Defining this method is [b]optional[/b]. If not overridden, the node will be filed under the root of the main category (see [method _get_category]).
	Args: [], Returns: String
*/
func (o *VisualShaderNodeCustom) X_GetSubcategory() gdnative.String {
	// log.Println("Calling VisualShaderNodeCustom.X_GetSubcategory()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeCustom", "_get_subcategory")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

// VisualShaderNodeCustomImplementer is an interface that implements the methods
// of the VisualShaderNodeCustom class.
type VisualShaderNodeCustomImplementer interface {
	VisualShaderNodeImplementer
	X_GetCategory() gdnative.String
	X_GetCode(inputVars gdnative.Array, outputVars gdnative.Array, mode gdnative.Int, aType gdnative.Int) gdnative.String
	X_GetDescription() gdnative.String
	X_GetGlobalCode(mode gdnative.Int) gdnative.String
	X_GetInputPortCount() gdnative.Int
	X_GetInputPortName(port gdnative.Int) gdnative.String
	X_GetInputPortType(port gdnative.Int) gdnative.Int
	X_GetName() gdnative.String
	X_GetOutputPortCount() gdnative.Int
	X_GetOutputPortName(port gdnative.Int) gdnative.String
	X_GetOutputPortType(port gdnative.Int) gdnative.Int
	X_GetReturnIconType() gdnative.Int
	X_GetSubcategory() gdnative.String
}
