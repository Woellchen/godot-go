package godot

import (
	"github.com/Woellchen/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

// VisualScriptYieldYieldMode is an enum for YieldMode values.
type VisualScriptYieldYieldMode int

const (
	VisualScriptYieldYieldFrame        VisualScriptYieldYieldMode = 1
	VisualScriptYieldYieldPhysicsFrame VisualScriptYieldYieldMode = 2
	VisualScriptYieldYieldWait         VisualScriptYieldYieldMode = 3
)

//func NewVisualScriptYieldFromPointer(ptr gdnative.Pointer) VisualScriptYield {
func newVisualScriptYieldFromPointer(ptr gdnative.Pointer) VisualScriptYield {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := VisualScriptYield{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Undocumented
*/
type VisualScriptYield struct {
	VisualScriptNode
	owner gdnative.Object
}

func (o *VisualScriptYield) BaseClass() string {
	return "VisualScriptYield"
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *VisualScriptYield) GetWaitTime() gdnative.Real {
	//log.Println("Calling VisualScriptYield.GetWaitTime()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualScriptYield", "get_wait_time")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: enum.VisualScriptYield::YieldMode
*/
func (o *VisualScriptYield) GetYieldMode() VisualScriptYieldYieldMode {
	//log.Println("Calling VisualScriptYield.GetYieldMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualScriptYield", "get_yield_mode")

	// Call the parent method.
	// enum.VisualScriptYield::YieldMode
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return VisualScriptYieldYieldMode(ret)
}

/*
        Undocumented
	Args: [{ false sec float}], Returns: void
*/
func (o *VisualScriptYield) SetWaitTime(sec gdnative.Real) {
	//log.Println("Calling VisualScriptYield.SetWaitTime()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(sec)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualScriptYield", "set_wait_time")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false mode int}], Returns: void
*/
func (o *VisualScriptYield) SetYieldMode(mode gdnative.Int) {
	//log.Println("Calling VisualScriptYield.SetYieldMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(mode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualScriptYield", "set_yield_mode")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// VisualScriptYieldImplementer is an interface that implements the methods
// of the VisualScriptYield class.
type VisualScriptYieldImplementer interface {
	VisualScriptNodeImplementer
	GetWaitTime() gdnative.Real
	SetWaitTime(sec gdnative.Real)
	SetYieldMode(mode gdnative.Int)
}
