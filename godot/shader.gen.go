package godot

import (
	"github.com/Woellchen/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

// ShaderMode is an enum for Mode values.
type ShaderMode int

const (
	ShaderModeCanvasItem ShaderMode = 1
	ShaderModeParticles  ShaderMode = 2
	ShaderModeSpatial    ShaderMode = 0
)

//func NewShaderFromPointer(ptr gdnative.Pointer) Shader {
func newShaderFromPointer(ptr gdnative.Pointer) Shader {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := Shader{}
	obj.SetBaseObject(owner)

	return obj
}

/*
This class allows you to define a custom shader program that can be used by a [ShaderMaterial]. Shaders allow you to write your own custom behavior for rendering objects or updating particle information. For a detailed explanation and usage, please see the tutorials linked below.
*/
type Shader struct {
	Resource
	owner gdnative.Object
}

func (o *Shader) BaseClass() string {
	return "Shader"
}

/*
        Undocumented
	Args: [], Returns: String
*/
func (o *Shader) GetCode() gdnative.String {
	//log.Println("Calling Shader.GetCode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Shader", "get_code")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: String
*/
func (o *Shader) GetCustomDefines() gdnative.String {
	//log.Println("Calling Shader.GetCustomDefines()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Shader", "get_custom_defines")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Returns the texture that is set as default for the specified parameter. [b]Note:[/b] [code]param[/code] must match the name of the uniform in the code exactly.
	Args: [{ false param String}], Returns: Texture
*/
func (o *Shader) GetDefaultTextureParam(param gdnative.String) TextureImplementer {
	//log.Println("Calling Shader.GetDefaultTextureParam()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(param)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Shader", "get_default_texture_param")

	// Call the parent method.
	// Texture
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newTextureFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(TextureImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Texture" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(TextureImplementer)
	}

	return &ret
}

/*
        Returns the shader mode for the shader, either [constant MODE_CANVAS_ITEM], [constant MODE_SPATIAL] or [constant MODE_PARTICLES].
	Args: [], Returns: enum.Shader::Mode
*/
func (o *Shader) GetMode() ShaderMode {
	//log.Println("Calling Shader.GetMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Shader", "get_mode")

	// Call the parent method.
	// enum.Shader::Mode
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ShaderMode(ret)
}

/*
        Returns [code]true[/code] if the shader has this param defined as a uniform in its code. [b]Note:[/b] [code]param[/code] must match the name of the uniform in the code exactly.
	Args: [{ false name String}], Returns: bool
*/
func (o *Shader) HasParam(name gdnative.String) gdnative.Bool {
	//log.Println("Calling Shader.HasParam()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(name)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Shader", "has_param")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false code String}], Returns: void
*/
func (o *Shader) SetCode(code gdnative.String) {
	//log.Println("Calling Shader.SetCode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(code)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Shader", "set_code")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false custom_defines String}], Returns: void
*/
func (o *Shader) SetCustomDefines(customDefines gdnative.String) {
	//log.Println("Calling Shader.SetCustomDefines()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(customDefines)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Shader", "set_custom_defines")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the default texture to be used with a texture uniform. The default is used if a texture is not set in the [ShaderMaterial]. [b]Note:[/b] [code]param[/code] must match the name of the uniform in the code exactly.
	Args: [{ false param String} { false texture Texture}], Returns: void
*/
func (o *Shader) SetDefaultTextureParam(param gdnative.String, texture TextureImplementer) {
	//log.Println("Calling Shader.SetDefaultTextureParam()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(param)
	ptrArguments[1] = gdnative.NewPointerFromObject(texture.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Shader", "set_default_texture_param")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// ShaderImplementer is an interface that implements the methods
// of the Shader class.
type ShaderImplementer interface {
	ResourceImplementer
	GetCode() gdnative.String
	GetCustomDefines() gdnative.String
	GetDefaultTextureParam(param gdnative.String) TextureImplementer
	HasParam(name gdnative.String) gdnative.Bool
	SetCode(code gdnative.String)
	SetCustomDefines(customDefines gdnative.String)
	SetDefaultTextureParam(param gdnative.String, texture TextureImplementer)
}
