package godot

import (
	"github.com/Woellchen/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewEditorSceneImporterFromPointer(ptr gdnative.Pointer) EditorSceneImporter {
func newEditorSceneImporterFromPointer(ptr gdnative.Pointer) EditorSceneImporter {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := EditorSceneImporter{}
	obj.SetBaseObject(owner)

	return obj
}

/*

 */
type EditorSceneImporter struct {
	Reference
	owner gdnative.Object
}

func (o *EditorSceneImporter) BaseClass() string {
	return "EditorSceneImporter"
}

/*

	Args: [], Returns: Array
*/
func (o *EditorSceneImporter) X_GetExtensions() gdnative.Array {
	// log.Println("Calling EditorSceneImporter.X_GetExtensions()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorSceneImporter", "_get_extensions")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	return ret
}

/*

	Args: [], Returns: int
*/
func (o *EditorSceneImporter) X_GetImportFlags() gdnative.Int {
	// log.Println("Calling EditorSceneImporter.X_GetImportFlags()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorSceneImporter", "_get_import_flags")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false path String} { false flags int} { false bake_fps int}], Returns: Animation
*/
func (o *EditorSceneImporter) X_ImportAnimation(path gdnative.String, flags gdnative.Int, bakeFps gdnative.Int) AnimationImplementer {
	// log.Println("Calling EditorSceneImporter.X_ImportAnimation()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromString(path)
	ptrArguments[1] = gdnative.NewPointerFromInt(flags)
	ptrArguments[2] = gdnative.NewPointerFromInt(bakeFps)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorSceneImporter", "_import_animation")

	// Call the parent method.
	// Animation
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newAnimationFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(AnimationImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Animation" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(AnimationImplementer)
	}

	return &ret
}

/*

	Args: [{ false path String} { false flags int} { false bake_fps int}], Returns: Node
*/
func (o *EditorSceneImporter) X_ImportScene(path gdnative.String, flags gdnative.Int, bakeFps gdnative.Int) NodeImplementer {
	// log.Println("Calling EditorSceneImporter.X_ImportScene()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromString(path)
	ptrArguments[1] = gdnative.NewPointerFromInt(flags)
	ptrArguments[2] = gdnative.NewPointerFromInt(bakeFps)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorSceneImporter", "_import_scene")

	// Call the parent method.
	// Node
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newNodeFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(NodeImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Node" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(NodeImplementer)
	}

	return &ret
}

/*

	Args: [{ false path String} { false flags int} { false bake_fps int}], Returns: Animation
*/
func (o *EditorSceneImporter) ImportAnimationFromOtherImporter(path gdnative.String, flags gdnative.Int, bakeFps gdnative.Int) AnimationImplementer {
	// log.Println("Calling EditorSceneImporter.ImportAnimationFromOtherImporter()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromString(path)
	ptrArguments[1] = gdnative.NewPointerFromInt(flags)
	ptrArguments[2] = gdnative.NewPointerFromInt(bakeFps)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorSceneImporter", "import_animation_from_other_importer")

	// Call the parent method.
	// Animation
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newAnimationFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(AnimationImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Animation" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(AnimationImplementer)
	}

	return &ret
}

/*

	Args: [{ false path String} { false flags int} { false bake_fps int}], Returns: Node
*/
func (o *EditorSceneImporter) ImportSceneFromOtherImporter(path gdnative.String, flags gdnative.Int, bakeFps gdnative.Int) NodeImplementer {
	// log.Println("Calling EditorSceneImporter.ImportSceneFromOtherImporter()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromString(path)
	ptrArguments[1] = gdnative.NewPointerFromInt(flags)
	ptrArguments[2] = gdnative.NewPointerFromInt(bakeFps)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorSceneImporter", "import_scene_from_other_importer")

	// Call the parent method.
	// Node
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newNodeFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(NodeImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Node" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(NodeImplementer)
	}

	return &ret
}

// EditorSceneImporterImplementer is an interface that implements the methods
// of the EditorSceneImporter class.
type EditorSceneImporterImplementer interface {
	ReferenceImplementer
	X_GetExtensions() gdnative.Array
	X_GetImportFlags() gdnative.Int
	X_ImportAnimation(path gdnative.String, flags gdnative.Int, bakeFps gdnative.Int) AnimationImplementer
	X_ImportScene(path gdnative.String, flags gdnative.Int, bakeFps gdnative.Int) NodeImplementer
	ImportAnimationFromOtherImporter(path gdnative.String, flags gdnative.Int, bakeFps gdnative.Int) AnimationImplementer
	ImportSceneFromOtherImporter(path gdnative.String, flags gdnative.Int, bakeFps gdnative.Int) NodeImplementer
}
