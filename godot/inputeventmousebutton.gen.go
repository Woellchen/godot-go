package godot

import (
	"github.com/Woellchen/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewInputEventMouseButtonFromPointer(ptr gdnative.Pointer) InputEventMouseButton {
func newInputEventMouseButtonFromPointer(ptr gdnative.Pointer) InputEventMouseButton {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := InputEventMouseButton{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Contains mouse click information. See [method Node._input].
*/
type InputEventMouseButton struct {
	InputEventMouse
	owner gdnative.Object
}

func (o *InputEventMouseButton) BaseClass() string {
	return "InputEventMouseButton"
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *InputEventMouseButton) GetButtonIndex() gdnative.Int {
	// log.Println("Calling InputEventMouseButton.GetButtonIndex()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("InputEventMouseButton", "get_button_index")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *InputEventMouseButton) GetFactor() gdnative.Real {
	// log.Println("Calling InputEventMouseButton.GetFactor()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("InputEventMouseButton", "get_factor")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *InputEventMouseButton) IsDoubleclick() gdnative.Bool {
	// log.Println("Calling InputEventMouseButton.IsDoubleclick()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("InputEventMouseButton", "is_doubleclick")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false button_index int}], Returns: void
*/
func (o *InputEventMouseButton) SetButtonIndex(buttonIndex gdnative.Int) {
	// log.Println("Calling InputEventMouseButton.SetButtonIndex()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(buttonIndex)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("InputEventMouseButton", "set_button_index")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false doubleclick bool}], Returns: void
*/
func (o *InputEventMouseButton) SetDoubleclick(doubleclick gdnative.Bool) {
	// log.Println("Calling InputEventMouseButton.SetDoubleclick()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(doubleclick)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("InputEventMouseButton", "set_doubleclick")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false factor float}], Returns: void
*/
func (o *InputEventMouseButton) SetFactor(factor gdnative.Real) {
	// log.Println("Calling InputEventMouseButton.SetFactor()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(factor)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("InputEventMouseButton", "set_factor")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false pressed bool}], Returns: void
*/
func (o *InputEventMouseButton) SetPressed(pressed gdnative.Bool) {
	// log.Println("Calling InputEventMouseButton.SetPressed()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(pressed)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("InputEventMouseButton", "set_pressed")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// InputEventMouseButtonImplementer is an interface that implements the methods
// of the InputEventMouseButton class.
type InputEventMouseButtonImplementer interface {
	InputEventMouseImplementer
	GetButtonIndex() gdnative.Int
	GetFactor() gdnative.Real
	IsDoubleclick() gdnative.Bool
	SetButtonIndex(buttonIndex gdnative.Int)
	SetDoubleclick(doubleclick gdnative.Bool)
	SetFactor(factor gdnative.Real)
	SetPressed(pressed gdnative.Bool)
}
