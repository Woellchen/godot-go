package godot

import (
	"github.com/Woellchen/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewEditorVCSInterfaceFromPointer(ptr gdnative.Pointer) EditorVCSInterface {
func newEditorVCSInterfaceFromPointer(ptr gdnative.Pointer) EditorVCSInterface {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := EditorVCSInterface{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Used by the editor to display VCS extracted information in the editor. The implementation of this API is included in VCS addons, which are essentially GDNative plugins that need to be put into the project folder. These VCS addons are scripts which are attached (on demand) to the object instance of [code]EditorVCSInterface[/code]. All the functions listed below, instead of performing the task themselves, they call the internally defined functions in the VCS addons to provide a plug-n-play experience.
*/
type EditorVCSInterface struct {
	Object
	owner gdnative.Object
}

func (o *EditorVCSInterface) BaseClass() string {
	return "EditorVCSInterface"
}

/*
        Undocumented
	Args: [{ false msg String}], Returns: void
*/
func (o *EditorVCSInterface) X_Commit(msg gdnative.String) {
	// log.Println("Calling EditorVCSInterface.X_Commit()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(msg)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorVCSInterface", "_commit")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false file_path String}], Returns: Array
*/
func (o *EditorVCSInterface) X_GetFileDiff(filePath gdnative.String) gdnative.Array {
	// log.Println("Calling EditorVCSInterface.X_GetFileDiff()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(filePath)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorVCSInterface", "_get_file_diff")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Dictionary
*/
func (o *EditorVCSInterface) X_GetModifiedFilesData() gdnative.Dictionary {
	// log.Println("Calling EditorVCSInterface.X_GetModifiedFilesData()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorVCSInterface", "_get_modified_files_data")

	// Call the parent method.
	// Dictionary
	retPtr := gdnative.NewEmptyDictionary()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewDictionaryFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: String
*/
func (o *EditorVCSInterface) X_GetProjectName() gdnative.String {
	// log.Println("Calling EditorVCSInterface.X_GetProjectName()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorVCSInterface", "_get_project_name")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: String
*/
func (o *EditorVCSInterface) X_GetVcsName() gdnative.String {
	// log.Println("Calling EditorVCSInterface.X_GetVcsName()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorVCSInterface", "_get_vcs_name")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false project_root_path String}], Returns: bool
*/
func (o *EditorVCSInterface) X_Initialize(projectRootPath gdnative.String) gdnative.Bool {
	// log.Println("Calling EditorVCSInterface.X_Initialize()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(projectRootPath)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorVCSInterface", "_initialize")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *EditorVCSInterface) X_IsVcsInitialized() gdnative.Bool {
	// log.Println("Calling EditorVCSInterface.X_IsVcsInitialized()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorVCSInterface", "_is_vcs_initialized")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *EditorVCSInterface) X_ShutDown() gdnative.Bool {
	// log.Println("Calling EditorVCSInterface.X_ShutDown()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorVCSInterface", "_shut_down")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false file_path String}], Returns: void
*/
func (o *EditorVCSInterface) X_StageFile(filePath gdnative.String) {
	// log.Println("Calling EditorVCSInterface.X_StageFile()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(filePath)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorVCSInterface", "_stage_file")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false file_path String}], Returns: void
*/
func (o *EditorVCSInterface) X_UnstageFile(filePath gdnative.String) {
	// log.Println("Calling EditorVCSInterface.X_UnstageFile()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(filePath)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorVCSInterface", "_unstage_file")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Creates a version commit if the addon is initialized, else returns without doing anything. Uses the files which have been staged previously, with the commit message set to a value as provided as in the argument.
	Args: [{ false msg String}], Returns: void
*/
func (o *EditorVCSInterface) Commit(msg gdnative.String) {
	// log.Println("Calling EditorVCSInterface.Commit()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(msg)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorVCSInterface", "commit")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Returns an [Array] of [Dictionary] objects containing the diff output from the VCS in use, if a VCS addon is initialized, else returns an empty [Array] object. The diff contents also consist of some contextual lines which provide context to the observed line change in the file. Each [Dictionary] object has the line diff contents under the keys: - [code]"content"[/code] to store a [String] containing the line contents - [code]"status"[/code] to store a [String] which contains [code]"+"[/code] in case the content is a line addition but it stores a [code]"-"[/code] in case of deletion and an empty string in the case the line content is neither an addition nor a deletion. - [code]"new_line_number"[/code] to store an integer containing the new line number of the line content. - [code]"line_count"[/code] to store an integer containing the number of lines in the line content. - [code]"old_line_number"[/code] to store an integer containing the old line number of the line content. - [code]"offset"[/code] to store the offset of the line change since the first contextual line content.
	Args: [{ false file_path String}], Returns: Array
*/
func (o *EditorVCSInterface) GetFileDiff(filePath gdnative.String) gdnative.Array {
	// log.Println("Calling EditorVCSInterface.GetFileDiff()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(filePath)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorVCSInterface", "get_file_diff")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	return ret
}

/*
        Returns a [Dictionary] containing the path of the detected file change mapped to an integer signifying what kind of a change the corresponding file has experienced. The following integer values are being used to signify that the detected file is: - [code]0[/code]: New to the VCS working directory - [code]1[/code]: Modified - [code]2[/code]: Renamed - [code]3[/code]: Deleted - [code]4[/code]: Typechanged
	Args: [], Returns: Dictionary
*/
func (o *EditorVCSInterface) GetModifiedFilesData() gdnative.Dictionary {
	// log.Println("Calling EditorVCSInterface.GetModifiedFilesData()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorVCSInterface", "get_modified_files_data")

	// Call the parent method.
	// Dictionary
	retPtr := gdnative.NewEmptyDictionary()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewDictionaryFromPointer(retPtr)
	return ret
}

/*
        Returns the project name of the VCS working directory.
	Args: [], Returns: String
*/
func (o *EditorVCSInterface) GetProjectName() gdnative.String {
	// log.Println("Calling EditorVCSInterface.GetProjectName()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorVCSInterface", "get_project_name")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Returns the name of the VCS if the VCS has been initialized, else return an empty string.
	Args: [], Returns: String
*/
func (o *EditorVCSInterface) GetVcsName() gdnative.String {
	// log.Println("Calling EditorVCSInterface.GetVcsName()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorVCSInterface", "get_vcs_name")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Initializes the VCS addon if not already. Uses the argument value as the path to the working directory of the project. Creates the initial commit if required. Returns [code]true[/code] if no failure occurs, else returns [code]false[/code].
	Args: [{ false project_root_path String}], Returns: bool
*/
func (o *EditorVCSInterface) Initialize(projectRootPath gdnative.String) gdnative.Bool {
	// log.Println("Calling EditorVCSInterface.Initialize()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(projectRootPath)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorVCSInterface", "initialize")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if the addon is ready to respond to function calls, else returns [code]false[/code].
	Args: [], Returns: bool
*/
func (o *EditorVCSInterface) IsAddonReady() gdnative.Bool {
	// log.Println("Calling EditorVCSInterface.IsAddonReady()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorVCSInterface", "is_addon_ready")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if the VCS addon has been initialized, else returns [code]false[/code].
	Args: [], Returns: bool
*/
func (o *EditorVCSInterface) IsVcsInitialized() gdnative.Bool {
	// log.Println("Calling EditorVCSInterface.IsVcsInitialized()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorVCSInterface", "is_vcs_initialized")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Shuts down the VCS addon to allow cleanup code to run on call. Returns [code]true[/code] is no failure occurs, else returns [code]false[/code].
	Args: [], Returns: bool
*/
func (o *EditorVCSInterface) ShutDown() gdnative.Bool {
	// log.Println("Calling EditorVCSInterface.ShutDown()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorVCSInterface", "shut_down")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Stages the file which should be committed when [method EditorVCSInterface.commit] is called. Argument should contain the absolute path.
	Args: [{ false file_path String}], Returns: void
*/
func (o *EditorVCSInterface) StageFile(filePath gdnative.String) {
	// log.Println("Calling EditorVCSInterface.StageFile()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(filePath)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorVCSInterface", "stage_file")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Unstages the file which was staged previously to be committed, so that it is no longer committed when [method EditorVCSInterface.commit] is called. Argument should contain the absolute path.
	Args: [{ false file_path String}], Returns: void
*/
func (o *EditorVCSInterface) UnstageFile(filePath gdnative.String) {
	// log.Println("Calling EditorVCSInterface.UnstageFile()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(filePath)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorVCSInterface", "unstage_file")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// EditorVCSInterfaceImplementer is an interface that implements the methods
// of the EditorVCSInterface class.
type EditorVCSInterfaceImplementer interface {
	ObjectImplementer
	X_Commit(msg gdnative.String)
	X_GetFileDiff(filePath gdnative.String) gdnative.Array
	X_GetModifiedFilesData() gdnative.Dictionary
	X_GetProjectName() gdnative.String
	X_GetVcsName() gdnative.String
	X_Initialize(projectRootPath gdnative.String) gdnative.Bool
	X_IsVcsInitialized() gdnative.Bool
	X_ShutDown() gdnative.Bool
	X_StageFile(filePath gdnative.String)
	X_UnstageFile(filePath gdnative.String)
	Commit(msg gdnative.String)
	GetFileDiff(filePath gdnative.String) gdnative.Array
	GetModifiedFilesData() gdnative.Dictionary
	GetProjectName() gdnative.String
	GetVcsName() gdnative.String
	Initialize(projectRootPath gdnative.String) gdnative.Bool
	IsAddonReady() gdnative.Bool
	IsVcsInitialized() gdnative.Bool
	ShutDown() gdnative.Bool
	StageFile(filePath gdnative.String)
	UnstageFile(filePath gdnative.String)
}
