package godot

import (
	"github.com/Woellchen/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewAudioEffectReverbFromPointer(ptr gdnative.Pointer) AudioEffectReverb {
func newAudioEffectReverbFromPointer(ptr gdnative.Pointer) AudioEffectReverb {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := AudioEffectReverb{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Simulates rooms of different sizes. Its parameters can be adjusted to simulate the sound of a specific room.
*/
type AudioEffectReverb struct {
	AudioEffect
	owner gdnative.Object
}

func (o *AudioEffectReverb) BaseClass() string {
	return "AudioEffectReverb"
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *AudioEffectReverb) GetDamping() gdnative.Real {
	//log.Println("Calling AudioEffectReverb.GetDamping()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AudioEffectReverb", "get_damping")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *AudioEffectReverb) GetDry() gdnative.Real {
	//log.Println("Calling AudioEffectReverb.GetDry()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AudioEffectReverb", "get_dry")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *AudioEffectReverb) GetHpf() gdnative.Real {
	//log.Println("Calling AudioEffectReverb.GetHpf()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AudioEffectReverb", "get_hpf")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *AudioEffectReverb) GetPredelayFeedback() gdnative.Real {
	//log.Println("Calling AudioEffectReverb.GetPredelayFeedback()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AudioEffectReverb", "get_predelay_feedback")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *AudioEffectReverb) GetPredelayMsec() gdnative.Real {
	//log.Println("Calling AudioEffectReverb.GetPredelayMsec()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AudioEffectReverb", "get_predelay_msec")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *AudioEffectReverb) GetRoomSize() gdnative.Real {
	//log.Println("Calling AudioEffectReverb.GetRoomSize()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AudioEffectReverb", "get_room_size")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *AudioEffectReverb) GetSpread() gdnative.Real {
	//log.Println("Calling AudioEffectReverb.GetSpread()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AudioEffectReverb", "get_spread")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *AudioEffectReverb) GetWet() gdnative.Real {
	//log.Println("Calling AudioEffectReverb.GetWet()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AudioEffectReverb", "get_wet")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false amount float}], Returns: void
*/
func (o *AudioEffectReverb) SetDamping(amount gdnative.Real) {
	//log.Println("Calling AudioEffectReverb.SetDamping()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(amount)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AudioEffectReverb", "set_damping")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false amount float}], Returns: void
*/
func (o *AudioEffectReverb) SetDry(amount gdnative.Real) {
	//log.Println("Calling AudioEffectReverb.SetDry()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(amount)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AudioEffectReverb", "set_dry")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false amount float}], Returns: void
*/
func (o *AudioEffectReverb) SetHpf(amount gdnative.Real) {
	//log.Println("Calling AudioEffectReverb.SetHpf()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(amount)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AudioEffectReverb", "set_hpf")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false feedback float}], Returns: void
*/
func (o *AudioEffectReverb) SetPredelayFeedback(feedback gdnative.Real) {
	//log.Println("Calling AudioEffectReverb.SetPredelayFeedback()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(feedback)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AudioEffectReverb", "set_predelay_feedback")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false msec float}], Returns: void
*/
func (o *AudioEffectReverb) SetPredelayMsec(msec gdnative.Real) {
	//log.Println("Calling AudioEffectReverb.SetPredelayMsec()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(msec)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AudioEffectReverb", "set_predelay_msec")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false size float}], Returns: void
*/
func (o *AudioEffectReverb) SetRoomSize(size gdnative.Real) {
	//log.Println("Calling AudioEffectReverb.SetRoomSize()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(size)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AudioEffectReverb", "set_room_size")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false amount float}], Returns: void
*/
func (o *AudioEffectReverb) SetSpread(amount gdnative.Real) {
	//log.Println("Calling AudioEffectReverb.SetSpread()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(amount)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AudioEffectReverb", "set_spread")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false amount float}], Returns: void
*/
func (o *AudioEffectReverb) SetWet(amount gdnative.Real) {
	//log.Println("Calling AudioEffectReverb.SetWet()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(amount)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AudioEffectReverb", "set_wet")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// AudioEffectReverbImplementer is an interface that implements the methods
// of the AudioEffectReverb class.
type AudioEffectReverbImplementer interface {
	AudioEffectImplementer
	GetDamping() gdnative.Real
	GetDry() gdnative.Real
	GetHpf() gdnative.Real
	GetPredelayFeedback() gdnative.Real
	GetPredelayMsec() gdnative.Real
	GetRoomSize() gdnative.Real
	GetSpread() gdnative.Real
	GetWet() gdnative.Real
	SetDamping(amount gdnative.Real)
	SetDry(amount gdnative.Real)
	SetHpf(amount gdnative.Real)
	SetPredelayFeedback(feedback gdnative.Real)
	SetPredelayMsec(msec gdnative.Real)
	SetRoomSize(size gdnative.Real)
	SetSpread(amount gdnative.Real)
	SetWet(amount gdnative.Real)
}
