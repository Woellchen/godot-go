package godot

import (
	"github.com/Woellchen/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewCurveTextureFromPointer(ptr gdnative.Pointer) CurveTexture {
func newCurveTextureFromPointer(ptr gdnative.Pointer) CurveTexture {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := CurveTexture{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Renders a given [Curve] provided to it. Simplifies the task of drawing curves and/or saving them as image files.
*/
type CurveTexture struct {
	Texture
	owner gdnative.Object
}

func (o *CurveTexture) BaseClass() string {
	return "CurveTexture"
}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *CurveTexture) X_Update() {
	// log.Println("Calling CurveTexture.X_Update()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CurveTexture", "_update")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: Curve
*/
func (o *CurveTexture) GetCurve() CurveImplementer {
	// log.Println("Calling CurveTexture.GetCurve()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CurveTexture", "get_curve")

	// Call the parent method.
	// Curve
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newCurveFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(CurveImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Curve" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(CurveImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [{ false curve Curve}], Returns: void
*/
func (o *CurveTexture) SetCurve(curve CurveImplementer) {
	// log.Println("Calling CurveTexture.SetCurve()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(curve.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CurveTexture", "set_curve")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false width int}], Returns: void
*/
func (o *CurveTexture) SetWidth(width gdnative.Int) {
	// log.Println("Calling CurveTexture.SetWidth()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(width)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CurveTexture", "set_width")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// CurveTextureImplementer is an interface that implements the methods
// of the CurveTexture class.
type CurveTextureImplementer interface {
	TextureImplementer
	X_Update()
	GetCurve() CurveImplementer
	SetCurve(curve CurveImplementer)
	SetWidth(width gdnative.Int)
}
