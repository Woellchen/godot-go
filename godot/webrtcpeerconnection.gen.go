package godot

import (
	"github.com/Woellchen/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

// WebRTCPeerConnectionConnectionState is an enum for ConnectionState values.
type WebRTCPeerConnectionConnectionState int

const (
	WebRTCPeerConnectionStateClosed       WebRTCPeerConnectionConnectionState = 5
	WebRTCPeerConnectionStateConnected    WebRTCPeerConnectionConnectionState = 2
	WebRTCPeerConnectionStateConnecting   WebRTCPeerConnectionConnectionState = 1
	WebRTCPeerConnectionStateDisconnected WebRTCPeerConnectionConnectionState = 3
	WebRTCPeerConnectionStateFailed       WebRTCPeerConnectionConnectionState = 4
	WebRTCPeerConnectionStateNew          WebRTCPeerConnectionConnectionState = 0
)

//func NewWebRTCPeerConnectionFromPointer(ptr gdnative.Pointer) WebRTCPeerConnection {
func newWebRTCPeerConnectionFromPointer(ptr gdnative.Pointer) WebRTCPeerConnection {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := WebRTCPeerConnection{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Undocumented
*/
type WebRTCPeerConnection struct {
	Reference
	owner gdnative.Object
}

func (o *WebRTCPeerConnection) BaseClass() string {
	return "WebRTCPeerConnection"
}

/*
        Undocumented
	Args: [{ false media String} { false index int} { false name String}], Returns: enum.Error
*/
func (o *WebRTCPeerConnection) AddIceCandidate(media gdnative.String, index gdnative.Int, name gdnative.String) gdnative.Error {
	// log.Println("Calling WebRTCPeerConnection.AddIceCandidate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromString(media)
	ptrArguments[1] = gdnative.NewPointerFromInt(index)
	ptrArguments[2] = gdnative.NewPointerFromString(name)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("WebRTCPeerConnection", "add_ice_candidate")

	// Call the parent method.
	// enum.Error
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return gdnative.Error(ret)
}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *WebRTCPeerConnection) Close() {
	// log.Println("Calling WebRTCPeerConnection.Close()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("WebRTCPeerConnection", "close")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false label String} {{} true options Dictionary}], Returns: WebRTCDataChannel
*/
func (o *WebRTCPeerConnection) CreateDataChannel(label gdnative.String, options gdnative.Dictionary) WebRTCDataChannelImplementer {
	// log.Println("Calling WebRTCPeerConnection.CreateDataChannel()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(label)
	ptrArguments[1] = gdnative.NewPointerFromDictionary(options)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("WebRTCPeerConnection", "create_data_channel")

	// Call the parent method.
	// WebRTCDataChannel
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newWebRTCDataChannelFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(WebRTCDataChannelImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "WebRTCDataChannel" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(WebRTCDataChannelImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [], Returns: enum.Error
*/
func (o *WebRTCPeerConnection) CreateOffer() gdnative.Error {
	// log.Println("Calling WebRTCPeerConnection.CreateOffer()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("WebRTCPeerConnection", "create_offer")

	// Call the parent method.
	// enum.Error
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return gdnative.Error(ret)
}

/*
        Undocumented
	Args: [], Returns: enum.WebRTCPeerConnection::ConnectionState
*/
func (o *WebRTCPeerConnection) GetConnectionState() WebRTCPeerConnectionConnectionState {
	// log.Println("Calling WebRTCPeerConnection.GetConnectionState()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("WebRTCPeerConnection", "get_connection_state")

	// Call the parent method.
	// enum.WebRTCPeerConnection::ConnectionState
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return WebRTCPeerConnectionConnectionState(ret)
}

/*
        Undocumented
	Args: [{{} true configuration Dictionary}], Returns: enum.Error
*/
func (o *WebRTCPeerConnection) Initialize(configuration gdnative.Dictionary) gdnative.Error {
	// log.Println("Calling WebRTCPeerConnection.Initialize()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromDictionary(configuration)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("WebRTCPeerConnection", "initialize")

	// Call the parent method.
	// enum.Error
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return gdnative.Error(ret)
}

/*
        Undocumented
	Args: [], Returns: enum.Error
*/
func (o *WebRTCPeerConnection) Poll() gdnative.Error {
	// log.Println("Calling WebRTCPeerConnection.Poll()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("WebRTCPeerConnection", "poll")

	// Call the parent method.
	// enum.Error
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return gdnative.Error(ret)
}

/*
        Undocumented
	Args: [{ false type String} { false sdp String}], Returns: enum.Error
*/
func (o *WebRTCPeerConnection) SetLocalDescription(aType gdnative.String, sdp gdnative.String) gdnative.Error {
	// log.Println("Calling WebRTCPeerConnection.SetLocalDescription()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(aType)
	ptrArguments[1] = gdnative.NewPointerFromString(sdp)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("WebRTCPeerConnection", "set_local_description")

	// Call the parent method.
	// enum.Error
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return gdnative.Error(ret)
}

/*
        Undocumented
	Args: [{ false type String} { false sdp String}], Returns: enum.Error
*/
func (o *WebRTCPeerConnection) SetRemoteDescription(aType gdnative.String, sdp gdnative.String) gdnative.Error {
	// log.Println("Calling WebRTCPeerConnection.SetRemoteDescription()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(aType)
	ptrArguments[1] = gdnative.NewPointerFromString(sdp)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("WebRTCPeerConnection", "set_remote_description")

	// Call the parent method.
	// enum.Error
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return gdnative.Error(ret)
}

// WebRTCPeerConnectionImplementer is an interface that implements the methods
// of the WebRTCPeerConnection class.
type WebRTCPeerConnectionImplementer interface {
	ReferenceImplementer
	Close()
	CreateDataChannel(label gdnative.String, options gdnative.Dictionary) WebRTCDataChannelImplementer
}
