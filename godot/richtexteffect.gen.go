package godot

import (
	"github.com/Woellchen/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewRichTextEffectFromPointer(ptr gdnative.Pointer) RichTextEffect {
func newRichTextEffectFromPointer(ptr gdnative.Pointer) RichTextEffect {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := RichTextEffect{}
	obj.SetBaseObject(owner)

	return obj
}

/*
A custom effect for use with [RichTextLabel]. [b]Note:[/b] For a [RichTextEffect] to be usable, a BBCode tag must be defined as a member variable called [code]bbcode[/code] in the script. [codeblock] # The RichTextEffect will be usable like this: `[example]Some text[/example]` var bbcode = "example" [/codeblock] [b]Note:[/b] As soon as a [RichTextLabel] contains at least one [RichTextEffect], it will continuously process the effect unless the project is paused. This may impact battery life negatively.
*/
type RichTextEffect struct {
	Resource
	owner gdnative.Object
}

func (o *RichTextEffect) BaseClass() string {
	return "RichTextEffect"
}

/*
        Override this method to modify properties in [code]char_fx[/code]. The method must return [code]true[/code] if the character could be transformed successfully. If the method returns [code]false[/code], it will skip transformation to avoid displaying broken text.
	Args: [{ false char_fx CharFXTransform}], Returns: bool
*/
func (o *RichTextEffect) X_ProcessCustomFx(charFx CharFXTransformImplementer) gdnative.Bool {
	// log.Println("Calling RichTextEffect.X_ProcessCustomFx()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(charFx.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RichTextEffect", "_process_custom_fx")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

// RichTextEffectImplementer is an interface that implements the methods
// of the RichTextEffect class.
type RichTextEffectImplementer interface {
	ResourceImplementer
	X_ProcessCustomFx(charFx CharFXTransformImplementer) gdnative.Bool
}
