package godot

import (
	"github.com/Woellchen/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewMaterialFromPointer(ptr gdnative.Pointer) Material {
func newMaterialFromPointer(ptr gdnative.Pointer) Material {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := Material{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Material is a base [Resource] used for coloring and shading geometry. All materials inherit from it and almost all [VisualInstance] derived nodes carry a Material. A few flags and parameters are shared between all material types and are configured here.
*/
type Material struct {
	Resource
	owner gdnative.Object
}

func (o *Material) BaseClass() string {
	return "Material"
}

/*
        Undocumented
	Args: [], Returns: Material
*/
func (o *Material) GetNextPass() MaterialImplementer {
	// log.Println("Calling Material.GetNextPass()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Material", "get_next_pass")

	// Call the parent method.
	// Material
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newMaterialFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(MaterialImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Material" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(MaterialImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *Material) GetRenderPriority() gdnative.Int {
	// log.Println("Calling Material.GetRenderPriority()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Material", "get_render_priority")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false next_pass Material}], Returns: void
*/
func (o *Material) SetNextPass(nextPass MaterialImplementer) {
	// log.Println("Calling Material.SetNextPass()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(nextPass.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Material", "set_next_pass")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false priority int}], Returns: void
*/
func (o *Material) SetRenderPriority(priority gdnative.Int) {
	// log.Println("Calling Material.SetRenderPriority()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(priority)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Material", "set_render_priority")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// MaterialImplementer is an interface that implements the methods
// of the Material class.
type MaterialImplementer interface {
	ResourceImplementer
	GetNextPass() MaterialImplementer
	GetRenderPriority() gdnative.Int
	SetNextPass(nextPass MaterialImplementer)
	SetRenderPriority(priority gdnative.Int)
}
