package godot

import (
	"github.com/Woellchen/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewPointMeshFromPointer(ptr gdnative.Pointer) PointMesh {
func newPointMeshFromPointer(ptr gdnative.Pointer) PointMesh {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := PointMesh{}
	obj.SetBaseObject(owner)

	return obj
}

/*
The PointMesh is made from a single point. Instead of relying on triangles, points are rendered as a single rectangle on the screen with a constant size. They are intended to be used with Particle systems, but can be used as a cheap way to render constant size billboarded sprites (for example in a point cloud). PointMeshes, must be used with a material that has a point size. Point size can be accessed in a shader with [code]POINT_SIZE[/code], or in a [SpatialMaterial] by setting [member SpatialMaterial.flags_use_point_size] and the variable [member SpatialMaterial.params_point_size]. When using PointMeshes, properties that normally alter vertices will be ignored, including billboard mode, grow, and cull face.
*/
type PointMesh struct {
	PrimitiveMesh
	owner gdnative.Object
}

func (o *PointMesh) BaseClass() string {
	return "PointMesh"
}

// PointMeshImplementer is an interface that implements the methods
// of the PointMesh class.
type PointMeshImplementer interface {
	PrimitiveMeshImplementer
}
