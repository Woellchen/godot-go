package godot

import (
	"github.com/Woellchen/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewSpatialVelocityTrackerFromPointer(ptr gdnative.Pointer) SpatialVelocityTracker {
func newSpatialVelocityTrackerFromPointer(ptr gdnative.Pointer) SpatialVelocityTracker {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := SpatialVelocityTracker{}
	obj.SetBaseObject(owner)

	return obj
}

/*

 */
type SpatialVelocityTracker struct {
	Reference
	owner gdnative.Object
}

func (o *SpatialVelocityTracker) BaseClass() string {
	return "SpatialVelocityTracker"
}

/*

	Args: [], Returns: Vector3
*/
func (o *SpatialVelocityTracker) GetTrackedLinearVelocity() gdnative.Vector3 {
	// log.Println("Calling SpatialVelocityTracker.GetTrackedLinearVelocity()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SpatialVelocityTracker", "get_tracked_linear_velocity")

	// Call the parent method.
	// Vector3
	retPtr := gdnative.NewEmptyVector3()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector3FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *SpatialVelocityTracker) IsTrackingPhysicsStep() gdnative.Bool {
	// log.Println("Calling SpatialVelocityTracker.IsTrackingPhysicsStep()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SpatialVelocityTracker", "is_tracking_physics_step")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false position Vector3}], Returns: void
*/
func (o *SpatialVelocityTracker) Reset(position gdnative.Vector3) {
	// log.Println("Calling SpatialVelocityTracker.Reset()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector3(position)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SpatialVelocityTracker", "reset")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *SpatialVelocityTracker) SetTrackPhysicsStep(enable gdnative.Bool) {
	// log.Println("Calling SpatialVelocityTracker.SetTrackPhysicsStep()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SpatialVelocityTracker", "set_track_physics_step")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false position Vector3}], Returns: void
*/
func (o *SpatialVelocityTracker) UpdatePosition(position gdnative.Vector3) {
	// log.Println("Calling SpatialVelocityTracker.UpdatePosition()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector3(position)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SpatialVelocityTracker", "update_position")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// SpatialVelocityTrackerImplementer is an interface that implements the methods
// of the SpatialVelocityTracker class.
type SpatialVelocityTrackerImplementer interface {
	ReferenceImplementer
	GetTrackedLinearVelocity() gdnative.Vector3
	IsTrackingPhysicsStep() gdnative.Bool
	Reset(position gdnative.Vector3)
	SetTrackPhysicsStep(enable gdnative.Bool)
	UpdatePosition(position gdnative.Vector3)
}
