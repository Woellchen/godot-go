package godot

import (
	"github.com/Woellchen/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewX509CertificateFromPointer(ptr gdnative.Pointer) X509Certificate {
func newX509CertificateFromPointer(ptr gdnative.Pointer) X509Certificate {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := X509Certificate{}
	obj.SetBaseObject(owner)

	return obj
}

/*
The X509Certificate class represents an X509 certificate. Certificates can be loaded and saved like any other [Resource]. They can be used as the server certificate in [method StreamPeerSSL.accept_stream] (along with the proper [CryptoKey]), and to specify the only certificate that should be accepted when connecting to an SSL server via [method StreamPeerSSL.connect_to_stream]. [b]Note:[/b] Not available in HTML5 exports.
*/
type X509Certificate struct {
	Resource
	owner gdnative.Object
}

func (o *X509Certificate) BaseClass() string {
	return "X509Certificate"
}

/*
        Loads a certificate from [code]path[/code] ("*.crt" file).
	Args: [{ false path String}], Returns: enum.Error
*/
func (o *X509Certificate) Load(path gdnative.String) gdnative.Error {
	//log.Println("Calling X509Certificate.Load()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(path)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("X509Certificate", "load")

	// Call the parent method.
	// enum.Error
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return gdnative.Error(ret)
}

/*
        Saves a certificate to the given [code]path[/code] (should be a "*.crt" file).
	Args: [{ false path String}], Returns: enum.Error
*/
func (o *X509Certificate) Save(path gdnative.String) gdnative.Error {
	//log.Println("Calling X509Certificate.Save()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(path)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("X509Certificate", "save")

	// Call the parent method.
	// enum.Error
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return gdnative.Error(ret)
}

// X509CertificateImplementer is an interface that implements the methods
// of the X509Certificate class.
type X509CertificateImplementer interface {
	ResourceImplementer
}
