package godot

import (
	"github.com/Woellchen/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewEditorSpinSliderFromPointer(ptr gdnative.Pointer) EditorSpinSlider {
func newEditorSpinSliderFromPointer(ptr gdnative.Pointer) EditorSpinSlider {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := EditorSpinSlider{}
	obj.SetBaseObject(owner)

	return obj
}

/*

 */
type EditorSpinSlider struct {
	Range
	owner gdnative.Object
}

func (o *EditorSpinSlider) BaseClass() string {
	return "EditorSpinSlider"
}

/*
        Undocumented
	Args: [{ false arg0 InputEvent}], Returns: void
*/
func (o *EditorSpinSlider) X_GrabberGuiInput(arg0 InputEventImplementer) {
	// log.Println("Calling EditorSpinSlider.X_GrabberGuiInput()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(arg0.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorSpinSlider", "_grabber_gui_input")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *EditorSpinSlider) X_GrabberMouseEntered() {
	// log.Println("Calling EditorSpinSlider.X_GrabberMouseEntered()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorSpinSlider", "_grabber_mouse_entered")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *EditorSpinSlider) X_GrabberMouseExited() {
	// log.Println("Calling EditorSpinSlider.X_GrabberMouseExited()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorSpinSlider", "_grabber_mouse_exited")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 InputEvent}], Returns: void
*/
func (o *EditorSpinSlider) X_GuiInput(arg0 InputEventImplementer) {
	// log.Println("Calling EditorSpinSlider.X_GuiInput()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(arg0.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorSpinSlider", "_gui_input")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *EditorSpinSlider) X_ValueFocusExited() {
	// log.Println("Calling EditorSpinSlider.X_ValueFocusExited()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorSpinSlider", "_value_focus_exited")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *EditorSpinSlider) X_ValueInputClosed() {
	// log.Println("Calling EditorSpinSlider.X_ValueInputClosed()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorSpinSlider", "_value_input_closed")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 String}], Returns: void
*/
func (o *EditorSpinSlider) X_ValueInputEntered(arg0 gdnative.String) {
	// log.Println("Calling EditorSpinSlider.X_ValueInputEntered()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(arg0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorSpinSlider", "_value_input_entered")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: String
*/
func (o *EditorSpinSlider) GetLabel() gdnative.String {
	// log.Println("Calling EditorSpinSlider.GetLabel()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorSpinSlider", "get_label")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *EditorSpinSlider) IsFlat() gdnative.Bool {
	// log.Println("Calling EditorSpinSlider.IsFlat()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorSpinSlider", "is_flat")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *EditorSpinSlider) IsReadOnly() gdnative.Bool {
	// log.Println("Calling EditorSpinSlider.IsReadOnly()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorSpinSlider", "is_read_only")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false flat bool}], Returns: void
*/
func (o *EditorSpinSlider) SetFlat(flat gdnative.Bool) {
	// log.Println("Calling EditorSpinSlider.SetFlat()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(flat)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorSpinSlider", "set_flat")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false label String}], Returns: void
*/
func (o *EditorSpinSlider) SetLabel(label gdnative.String) {
	// log.Println("Calling EditorSpinSlider.SetLabel()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(label)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorSpinSlider", "set_label")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false read_only bool}], Returns: void
*/
func (o *EditorSpinSlider) SetReadOnly(readOnly gdnative.Bool) {
	// log.Println("Calling EditorSpinSlider.SetReadOnly()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(readOnly)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorSpinSlider", "set_read_only")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// EditorSpinSliderImplementer is an interface that implements the methods
// of the EditorSpinSlider class.
type EditorSpinSliderImplementer interface {
	RangeImplementer
	X_GrabberGuiInput(arg0 InputEventImplementer)
	X_GrabberMouseEntered()
	X_GrabberMouseExited()
	X_ValueFocusExited()
	X_ValueInputClosed()
	X_ValueInputEntered(arg0 gdnative.String)
	GetLabel() gdnative.String
	IsFlat() gdnative.Bool
	IsReadOnly() gdnative.Bool
	SetFlat(flat gdnative.Bool)
	SetLabel(label gdnative.String)
	SetReadOnly(readOnly gdnative.Bool)
}
