package godot

import (
	"github.com/Woellchen/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

// ReflectionProbeUpdateMode is an enum for UpdateMode values.
type ReflectionProbeUpdateMode int

const (
	ReflectionProbeUpdateAlways ReflectionProbeUpdateMode = 1
	ReflectionProbeUpdateOnce   ReflectionProbeUpdateMode = 0
)

//func NewReflectionProbeFromPointer(ptr gdnative.Pointer) ReflectionProbe {
func newReflectionProbeFromPointer(ptr gdnative.Pointer) ReflectionProbe {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := ReflectionProbe{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Capture its surroundings as a dual paraboloid image, and stores versions of it with increasing levels of blur to simulate different material roughnesses. The [ReflectionProbe] is used to create high-quality reflections at the cost of performance. It can be combined with [GIProbe]s and Screen Space Reflections to achieve high quality reflections. [ReflectionProbe]s render all objects within their [member cull_mask], so updating them can be quite expensive. It is best to update them once with the important static objects and then leave them. Note: By default Godot will only render 16 reflection probes. If you need more, increase the number of atlas subdivisions. This setting can be found in [member ProjectSettings.rendering/quality/reflections/atlas_subdiv].
*/
type ReflectionProbe struct {
	VisualInstance
	owner gdnative.Object
}

func (o *ReflectionProbe) BaseClass() string {
	return "ReflectionProbe"
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *ReflectionProbe) AreShadowsEnabled() gdnative.Bool {
	//log.Println("Calling ReflectionProbe.AreShadowsEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ReflectionProbe", "are_shadows_enabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *ReflectionProbe) GetCullMask() gdnative.Int {
	//log.Println("Calling ReflectionProbe.GetCullMask()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ReflectionProbe", "get_cull_mask")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Vector3
*/
func (o *ReflectionProbe) GetExtents() gdnative.Vector3 {
	//log.Println("Calling ReflectionProbe.GetExtents()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ReflectionProbe", "get_extents")

	// Call the parent method.
	// Vector3
	retPtr := gdnative.NewEmptyVector3()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector3FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *ReflectionProbe) GetIntensity() gdnative.Real {
	//log.Println("Calling ReflectionProbe.GetIntensity()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ReflectionProbe", "get_intensity")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Color
*/
func (o *ReflectionProbe) GetInteriorAmbient() gdnative.Color {
	//log.Println("Calling ReflectionProbe.GetInteriorAmbient()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ReflectionProbe", "get_interior_ambient")

	// Call the parent method.
	// Color
	retPtr := gdnative.NewEmptyColor()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewColorFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *ReflectionProbe) GetInteriorAmbientEnergy() gdnative.Real {
	//log.Println("Calling ReflectionProbe.GetInteriorAmbientEnergy()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ReflectionProbe", "get_interior_ambient_energy")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *ReflectionProbe) GetInteriorAmbientProbeContribution() gdnative.Real {
	//log.Println("Calling ReflectionProbe.GetInteriorAmbientProbeContribution()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ReflectionProbe", "get_interior_ambient_probe_contribution")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *ReflectionProbe) GetMaxDistance() gdnative.Real {
	//log.Println("Calling ReflectionProbe.GetMaxDistance()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ReflectionProbe", "get_max_distance")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Vector3
*/
func (o *ReflectionProbe) GetOriginOffset() gdnative.Vector3 {
	//log.Println("Calling ReflectionProbe.GetOriginOffset()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ReflectionProbe", "get_origin_offset")

	// Call the parent method.
	// Vector3
	retPtr := gdnative.NewEmptyVector3()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector3FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: enum.ReflectionProbe::UpdateMode
*/
func (o *ReflectionProbe) GetUpdateMode() ReflectionProbeUpdateMode {
	//log.Println("Calling ReflectionProbe.GetUpdateMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ReflectionProbe", "get_update_mode")

	// Call the parent method.
	// enum.ReflectionProbe::UpdateMode
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ReflectionProbeUpdateMode(ret)
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *ReflectionProbe) IsBoxProjectionEnabled() gdnative.Bool {
	//log.Println("Calling ReflectionProbe.IsBoxProjectionEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ReflectionProbe", "is_box_projection_enabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *ReflectionProbe) IsSetAsInterior() gdnative.Bool {
	//log.Println("Calling ReflectionProbe.IsSetAsInterior()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ReflectionProbe", "is_set_as_interior")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *ReflectionProbe) SetAsInterior(enable gdnative.Bool) {
	//log.Println("Calling ReflectionProbe.SetAsInterior()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ReflectionProbe", "set_as_interior")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false layers int}], Returns: void
*/
func (o *ReflectionProbe) SetCullMask(layers gdnative.Int) {
	//log.Println("Calling ReflectionProbe.SetCullMask()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(layers)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ReflectionProbe", "set_cull_mask")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *ReflectionProbe) SetEnableBoxProjection(enable gdnative.Bool) {
	//log.Println("Calling ReflectionProbe.SetEnableBoxProjection()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ReflectionProbe", "set_enable_box_projection")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *ReflectionProbe) SetEnableShadows(enable gdnative.Bool) {
	//log.Println("Calling ReflectionProbe.SetEnableShadows()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ReflectionProbe", "set_enable_shadows")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false extents Vector3}], Returns: void
*/
func (o *ReflectionProbe) SetExtents(extents gdnative.Vector3) {
	//log.Println("Calling ReflectionProbe.SetExtents()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector3(extents)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ReflectionProbe", "set_extents")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false intensity float}], Returns: void
*/
func (o *ReflectionProbe) SetIntensity(intensity gdnative.Real) {
	//log.Println("Calling ReflectionProbe.SetIntensity()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(intensity)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ReflectionProbe", "set_intensity")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false ambient Color}], Returns: void
*/
func (o *ReflectionProbe) SetInteriorAmbient(ambient gdnative.Color) {
	//log.Println("Calling ReflectionProbe.SetInteriorAmbient()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromColor(ambient)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ReflectionProbe", "set_interior_ambient")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false ambient_energy float}], Returns: void
*/
func (o *ReflectionProbe) SetInteriorAmbientEnergy(ambientEnergy gdnative.Real) {
	//log.Println("Calling ReflectionProbe.SetInteriorAmbientEnergy()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(ambientEnergy)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ReflectionProbe", "set_interior_ambient_energy")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false ambient_probe_contribution float}], Returns: void
*/
func (o *ReflectionProbe) SetInteriorAmbientProbeContribution(ambientProbeContribution gdnative.Real) {
	//log.Println("Calling ReflectionProbe.SetInteriorAmbientProbeContribution()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(ambientProbeContribution)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ReflectionProbe", "set_interior_ambient_probe_contribution")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false max_distance float}], Returns: void
*/
func (o *ReflectionProbe) SetMaxDistance(maxDistance gdnative.Real) {
	//log.Println("Calling ReflectionProbe.SetMaxDistance()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(maxDistance)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ReflectionProbe", "set_max_distance")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false origin_offset Vector3}], Returns: void
*/
func (o *ReflectionProbe) SetOriginOffset(originOffset gdnative.Vector3) {
	//log.Println("Calling ReflectionProbe.SetOriginOffset()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector3(originOffset)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ReflectionProbe", "set_origin_offset")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false mode int}], Returns: void
*/
func (o *ReflectionProbe) SetUpdateMode(mode gdnative.Int) {
	//log.Println("Calling ReflectionProbe.SetUpdateMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(mode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ReflectionProbe", "set_update_mode")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// ReflectionProbeImplementer is an interface that implements the methods
// of the ReflectionProbe class.
type ReflectionProbeImplementer interface {
	VisualInstanceImplementer
	AreShadowsEnabled() gdnative.Bool
	GetCullMask() gdnative.Int
	GetExtents() gdnative.Vector3
	GetIntensity() gdnative.Real
	GetInteriorAmbient() gdnative.Color
	GetInteriorAmbientEnergy() gdnative.Real
	GetInteriorAmbientProbeContribution() gdnative.Real
	GetMaxDistance() gdnative.Real
	GetOriginOffset() gdnative.Vector3
	IsBoxProjectionEnabled() gdnative.Bool
	IsSetAsInterior() gdnative.Bool
	SetAsInterior(enable gdnative.Bool)
	SetCullMask(layers gdnative.Int)
	SetEnableBoxProjection(enable gdnative.Bool)
	SetEnableShadows(enable gdnative.Bool)
	SetExtents(extents gdnative.Vector3)
	SetIntensity(intensity gdnative.Real)
	SetInteriorAmbient(ambient gdnative.Color)
	SetInteriorAmbientEnergy(ambientEnergy gdnative.Real)
	SetInteriorAmbientProbeContribution(ambientProbeContribution gdnative.Real)
	SetMaxDistance(maxDistance gdnative.Real)
	SetOriginOffset(originOffset gdnative.Vector3)
	SetUpdateMode(mode gdnative.Int)
}
