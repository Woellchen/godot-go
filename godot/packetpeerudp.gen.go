package godot

import (
	"github.com/Woellchen/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewPacketPeerUDPFromPointer(ptr gdnative.Pointer) PacketPeerUDP {
func newPacketPeerUDPFromPointer(ptr gdnative.Pointer) PacketPeerUDP {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := PacketPeerUDP{}
	obj.SetBaseObject(owner)

	return obj
}

/*
UDP packet peer. Can be used to send raw UDP packets as well as [Variant]s.
*/
type PacketPeerUDP struct {
	PacketPeer
	owner gdnative.Object
}

func (o *PacketPeerUDP) BaseClass() string {
	return "PacketPeerUDP"
}

/*
        Closes the UDP socket the [PacketPeerUDP] is currently listening on.
	Args: [], Returns: void
*/
func (o *PacketPeerUDP) Close() {
	// log.Println("Calling PacketPeerUDP.Close()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PacketPeerUDP", "close")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Calling this method connects this UDP peer to the given [code]host[/code]/[code]port[/code] pair. UDP is in reality connectionless, so this option only means that incoming packets from different addresses are automatically discarded, and that outgoing packets are always sent to the connected address (future calls to [method set_dest_address] are not allowed). This method does not send any data to the remote peer, to do that, use [method PacketPeer.put_var] or [method PacketPeer.put_packet] as usual. See also [UDPServer]. Note: Connecting to the remote peer does not help to protect from malicious attacks like IP spoofing, etc. Think about using an encryption technique like SSL or DTLS if you feel like your application is transfering sensitive information.
	Args: [{ false host String} { false port int}], Returns: enum.Error
*/
func (o *PacketPeerUDP) ConnectToHost(host gdnative.String, port gdnative.Int) gdnative.Error {
	// log.Println("Calling PacketPeerUDP.ConnectToHost()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(host)
	ptrArguments[1] = gdnative.NewPointerFromInt(port)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PacketPeerUDP", "connect_to_host")

	// Call the parent method.
	// enum.Error
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return gdnative.Error(ret)
}

/*
        Returns the IP of the remote peer that sent the last packet(that was received with [method PacketPeer.get_packet] or [method PacketPeer.get_var]).
	Args: [], Returns: String
*/
func (o *PacketPeerUDP) GetPacketIp() gdnative.String {
	// log.Println("Calling PacketPeerUDP.GetPacketIp()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PacketPeerUDP", "get_packet_ip")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Returns the port of the remote peer that sent the last packet(that was received with [method PacketPeer.get_packet] or [method PacketPeer.get_var]).
	Args: [], Returns: int
*/
func (o *PacketPeerUDP) GetPacketPort() gdnative.Int {
	// log.Println("Calling PacketPeerUDP.GetPacketPort()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PacketPeerUDP", "get_packet_port")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if the UDP socket is open and has been connected to a remote address. See [method connect_to_host].
	Args: [], Returns: bool
*/
func (o *PacketPeerUDP) IsConnectedToHost() gdnative.Bool {
	// log.Println("Calling PacketPeerUDP.IsConnectedToHost()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PacketPeerUDP", "is_connected_to_host")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns whether this [PacketPeerUDP] is listening.
	Args: [], Returns: bool
*/
func (o *PacketPeerUDP) IsListening() gdnative.Bool {
	// log.Println("Calling PacketPeerUDP.IsListening()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PacketPeerUDP", "is_listening")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Joins the multicast group specified by [code]multicast_address[/code] using the interface identified by [code]interface_name[/code]. You can join the same multicast group with multiple interfaces. Use [method IP.get_local_interfaces] to know which are available. Note: Some Android devices might require the [code]CHANGE_WIFI_MULTICAST_STATE[/code] permission for multicast to work.
	Args: [{ false multicast_address String} { false interface_name String}], Returns: enum.Error
*/
func (o *PacketPeerUDP) JoinMulticastGroup(multicastAddress gdnative.String, interfaceName gdnative.String) gdnative.Error {
	// log.Println("Calling PacketPeerUDP.JoinMulticastGroup()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(multicastAddress)
	ptrArguments[1] = gdnative.NewPointerFromString(interfaceName)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PacketPeerUDP", "join_multicast_group")

	// Call the parent method.
	// enum.Error
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return gdnative.Error(ret)
}

/*
        Removes the interface identified by [code]interface_name[/code] from the multicast group specified by [code]multicast_address[/code].
	Args: [{ false multicast_address String} { false interface_name String}], Returns: enum.Error
*/
func (o *PacketPeerUDP) LeaveMulticastGroup(multicastAddress gdnative.String, interfaceName gdnative.String) gdnative.Error {
	// log.Println("Calling PacketPeerUDP.LeaveMulticastGroup()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(multicastAddress)
	ptrArguments[1] = gdnative.NewPointerFromString(interfaceName)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PacketPeerUDP", "leave_multicast_group")

	// Call the parent method.
	// enum.Error
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return gdnative.Error(ret)
}

/*
        Makes this [PacketPeerUDP] listen on the [code]port[/code] binding to [code]bind_address[/code] with a buffer size [code]recv_buf_size[/code]. If [code]bind_address[/code] is set to [code]"*"[/code] (default), the peer will listen on all available addresses (both IPv4 and IPv6). If [code]bind_address[/code] is set to [code]"0.0.0.0"[/code] (for IPv4) or [code]"::"[/code] (for IPv6), the peer will listen on all available addresses matching that IP type. If [code]bind_address[/code] is set to any valid address (e.g. [code]"192.168.1.101"[/code], [code]"::1"[/code], etc), the peer will only listen on the interface with that addresses (or fail if no interface with the given address exists).
	Args: [{ false port int} {* true bind_address String} {65536 true recv_buf_size int}], Returns: enum.Error
*/
func (o *PacketPeerUDP) Listen(port gdnative.Int, bindAddress gdnative.String, recvBufSize gdnative.Int) gdnative.Error {
	// log.Println("Calling PacketPeerUDP.Listen()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromInt(port)
	ptrArguments[1] = gdnative.NewPointerFromString(bindAddress)
	ptrArguments[2] = gdnative.NewPointerFromInt(recvBufSize)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PacketPeerUDP", "listen")

	// Call the parent method.
	// enum.Error
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return gdnative.Error(ret)
}

/*
        Enable or disable sending of broadcast packets (e.g. [code]set_dest_address("255.255.255.255", 4343)[/code]. This option is disabled by default. Note: Some Android devices might require the [code]CHANGE_WIFI_MULTICAST_STATE[/code] permission and this option to be enabled to receive broadcast packets too.
	Args: [{ false enabled bool}], Returns: void
*/
func (o *PacketPeerUDP) SetBroadcastEnabled(enabled gdnative.Bool) {
	// log.Println("Calling PacketPeerUDP.SetBroadcastEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PacketPeerUDP", "set_broadcast_enabled")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the destination address and port for sending packets and variables. A hostname will be resolved using DNS if needed. Note: [method set_broadcast_enabled] must be enabled before sending packets to a broadcast address (e.g. [code]255.255.255.255[/code]).
	Args: [{ false host String} { false port int}], Returns: enum.Error
*/
func (o *PacketPeerUDP) SetDestAddress(host gdnative.String, port gdnative.Int) gdnative.Error {
	// log.Println("Calling PacketPeerUDP.SetDestAddress()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(host)
	ptrArguments[1] = gdnative.NewPointerFromInt(port)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PacketPeerUDP", "set_dest_address")

	// Call the parent method.
	// enum.Error
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return gdnative.Error(ret)
}

/*
        Waits for a packet to arrive on the listening port. See [method listen].
	Args: [], Returns: enum.Error
*/
func (o *PacketPeerUDP) Wait() gdnative.Error {
	// log.Println("Calling PacketPeerUDP.Wait()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PacketPeerUDP", "wait")

	// Call the parent method.
	// enum.Error
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return gdnative.Error(ret)
}

// PacketPeerUDPImplementer is an interface that implements the methods
// of the PacketPeerUDP class.
type PacketPeerUDPImplementer interface {
	PacketPeerImplementer
	Close()
	GetPacketIp() gdnative.String
	GetPacketPort() gdnative.Int
	IsConnectedToHost() gdnative.Bool
	IsListening() gdnative.Bool
	SetBroadcastEnabled(enabled gdnative.Bool)
}
