package godot

import (
	"github.com/Woellchen/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewVisualShaderNodeGroupBaseFromPointer(ptr gdnative.Pointer) VisualShaderNodeGroupBase {
func newVisualShaderNodeGroupBaseFromPointer(ptr gdnative.Pointer) VisualShaderNodeGroupBase {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := VisualShaderNodeGroupBase{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Currently, has no direct usage, use the derived classes instead.
*/
type VisualShaderNodeGroupBase struct {
	VisualShaderNode
	owner gdnative.Object
}

func (o *VisualShaderNodeGroupBase) BaseClass() string {
	return "VisualShaderNodeGroupBase"
}

/*
        Adds an input port with the specified [code]type[/code] (see [enum VisualShaderNode.PortType]) and [code]name[/code].
	Args: [{ false id int} { false type int} { false name String}], Returns: void
*/
func (o *VisualShaderNodeGroupBase) AddInputPort(id gdnative.Int, aType gdnative.Int, name gdnative.String) {
	//log.Println("Calling VisualShaderNodeGroupBase.AddInputPort()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)
	ptrArguments[1] = gdnative.NewPointerFromInt(aType)
	ptrArguments[2] = gdnative.NewPointerFromString(name)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeGroupBase", "add_input_port")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Adds an output port with the specified [code]type[/code] (see [enum VisualShaderNode.PortType]) and [code]name[/code].
	Args: [{ false id int} { false type int} { false name String}], Returns: void
*/
func (o *VisualShaderNodeGroupBase) AddOutputPort(id gdnative.Int, aType gdnative.Int, name gdnative.String) {
	//log.Println("Calling VisualShaderNodeGroupBase.AddOutputPort()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)
	ptrArguments[1] = gdnative.NewPointerFromInt(aType)
	ptrArguments[2] = gdnative.NewPointerFromString(name)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeGroupBase", "add_output_port")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Removes all previously specified input ports.
	Args: [], Returns: void
*/
func (o *VisualShaderNodeGroupBase) ClearInputPorts() {
	//log.Println("Calling VisualShaderNodeGroupBase.ClearInputPorts()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeGroupBase", "clear_input_ports")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Removes all previously specified output ports.
	Args: [], Returns: void
*/
func (o *VisualShaderNodeGroupBase) ClearOutputPorts() {
	//log.Println("Calling VisualShaderNodeGroupBase.ClearOutputPorts()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeGroupBase", "clear_output_ports")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Returns a free input port ID which can be used in [method add_input_port].
	Args: [], Returns: int
*/
func (o *VisualShaderNodeGroupBase) GetFreeInputPortId() gdnative.Int {
	//log.Println("Calling VisualShaderNodeGroupBase.GetFreeInputPortId()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeGroupBase", "get_free_input_port_id")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns a free output port ID which can be used in [method add_output_port].
	Args: [], Returns: int
*/
func (o *VisualShaderNodeGroupBase) GetFreeOutputPortId() gdnative.Int {
	//log.Println("Calling VisualShaderNodeGroupBase.GetFreeOutputPortId()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeGroupBase", "get_free_output_port_id")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns the number of input ports in use. Alternative for [method get_free_input_port_id].
	Args: [], Returns: int
*/
func (o *VisualShaderNodeGroupBase) GetInputPortCount() gdnative.Int {
	//log.Println("Calling VisualShaderNodeGroupBase.GetInputPortCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeGroupBase", "get_input_port_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns a [String] description of the input ports as as colon-separated list using the format [code]id,type,name;[/code] (see [method add_input_port]).
	Args: [], Returns: String
*/
func (o *VisualShaderNodeGroupBase) GetInputs() gdnative.String {
	//log.Println("Calling VisualShaderNodeGroupBase.GetInputs()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeGroupBase", "get_inputs")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Returns the number of output ports in use. Alternative for [method get_free_output_port_id].
	Args: [], Returns: int
*/
func (o *VisualShaderNodeGroupBase) GetOutputPortCount() gdnative.Int {
	//log.Println("Calling VisualShaderNodeGroupBase.GetOutputPortCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeGroupBase", "get_output_port_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns a [String] description of the output ports as as colon-separated list using the format [code]id,type,name;[/code] (see [method add_output_port]).
	Args: [], Returns: String
*/
func (o *VisualShaderNodeGroupBase) GetOutputs() gdnative.String {
	//log.Println("Calling VisualShaderNodeGroupBase.GetOutputs()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeGroupBase", "get_outputs")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Vector2
*/
func (o *VisualShaderNodeGroupBase) GetSize() gdnative.Vector2 {
	//log.Println("Calling VisualShaderNodeGroupBase.GetSize()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeGroupBase", "get_size")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if the specified input port exists.
	Args: [{ false id int}], Returns: bool
*/
func (o *VisualShaderNodeGroupBase) HasInputPort(id gdnative.Int) gdnative.Bool {
	//log.Println("Calling VisualShaderNodeGroupBase.HasInputPort()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeGroupBase", "has_input_port")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if the specified output port exists.
	Args: [{ false id int}], Returns: bool
*/
func (o *VisualShaderNodeGroupBase) HasOutputPort(id gdnative.Int) gdnative.Bool {
	//log.Println("Calling VisualShaderNodeGroupBase.HasOutputPort()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeGroupBase", "has_output_port")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if the specified port name does not override an existed port name and is valid within the shader.
	Args: [{ false name String}], Returns: bool
*/
func (o *VisualShaderNodeGroupBase) IsValidPortName(name gdnative.String) gdnative.Bool {
	//log.Println("Calling VisualShaderNodeGroupBase.IsValidPortName()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(name)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeGroupBase", "is_valid_port_name")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Removes the specified input port.
	Args: [{ false id int}], Returns: void
*/
func (o *VisualShaderNodeGroupBase) RemoveInputPort(id gdnative.Int) {
	//log.Println("Calling VisualShaderNodeGroupBase.RemoveInputPort()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeGroupBase", "remove_input_port")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Removes the specified output port.
	Args: [{ false id int}], Returns: void
*/
func (o *VisualShaderNodeGroupBase) RemoveOutputPort(id gdnative.Int) {
	//log.Println("Calling VisualShaderNodeGroupBase.RemoveOutputPort()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeGroupBase", "remove_output_port")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Renames the specified input port.
	Args: [{ false id int} { false name String}], Returns: void
*/
func (o *VisualShaderNodeGroupBase) SetInputPortName(id gdnative.Int, name gdnative.String) {
	//log.Println("Calling VisualShaderNodeGroupBase.SetInputPortName()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)
	ptrArguments[1] = gdnative.NewPointerFromString(name)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeGroupBase", "set_input_port_name")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the specified input port's type (see [enum VisualShaderNode.PortType]).
	Args: [{ false id int} { false type int}], Returns: void
*/
func (o *VisualShaderNodeGroupBase) SetInputPortType(id gdnative.Int, aType gdnative.Int) {
	//log.Println("Calling VisualShaderNodeGroupBase.SetInputPortType()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)
	ptrArguments[1] = gdnative.NewPointerFromInt(aType)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeGroupBase", "set_input_port_type")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Defines all input ports using a [String] formatted as a colon-separated list: [code]id,type,name;[/code] (see [method add_input_port]).
	Args: [{ false inputs String}], Returns: void
*/
func (o *VisualShaderNodeGroupBase) SetInputs(inputs gdnative.String) {
	//log.Println("Calling VisualShaderNodeGroupBase.SetInputs()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(inputs)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeGroupBase", "set_inputs")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Renames the specified output port.
	Args: [{ false id int} { false name String}], Returns: void
*/
func (o *VisualShaderNodeGroupBase) SetOutputPortName(id gdnative.Int, name gdnative.String) {
	//log.Println("Calling VisualShaderNodeGroupBase.SetOutputPortName()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)
	ptrArguments[1] = gdnative.NewPointerFromString(name)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeGroupBase", "set_output_port_name")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the specified output port's type (see [enum VisualShaderNode.PortType]).
	Args: [{ false id int} { false type int}], Returns: void
*/
func (o *VisualShaderNodeGroupBase) SetOutputPortType(id gdnative.Int, aType gdnative.Int) {
	//log.Println("Calling VisualShaderNodeGroupBase.SetOutputPortType()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)
	ptrArguments[1] = gdnative.NewPointerFromInt(aType)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeGroupBase", "set_output_port_type")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Defines all output ports using a [String] formatted as a colon-separated list: [code]id,type,name;[/code] (see [method add_output_port]).
	Args: [{ false outputs String}], Returns: void
*/
func (o *VisualShaderNodeGroupBase) SetOutputs(outputs gdnative.String) {
	//log.Println("Calling VisualShaderNodeGroupBase.SetOutputs()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(outputs)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeGroupBase", "set_outputs")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false size Vector2}], Returns: void
*/
func (o *VisualShaderNodeGroupBase) SetSize(size gdnative.Vector2) {
	//log.Println("Calling VisualShaderNodeGroupBase.SetSize()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector2(size)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeGroupBase", "set_size")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// VisualShaderNodeGroupBaseImplementer is an interface that implements the methods
// of the VisualShaderNodeGroupBase class.
type VisualShaderNodeGroupBaseImplementer interface {
	VisualShaderNodeImplementer
	AddInputPort(id gdnative.Int, aType gdnative.Int, name gdnative.String)
	AddOutputPort(id gdnative.Int, aType gdnative.Int, name gdnative.String)
	ClearInputPorts()
	ClearOutputPorts()
	GetFreeInputPortId() gdnative.Int
	GetFreeOutputPortId() gdnative.Int
	GetInputPortCount() gdnative.Int
	GetInputs() gdnative.String
	GetOutputPortCount() gdnative.Int
	GetOutputs() gdnative.String
	GetSize() gdnative.Vector2
	HasInputPort(id gdnative.Int) gdnative.Bool
	HasOutputPort(id gdnative.Int) gdnative.Bool
	IsValidPortName(name gdnative.String) gdnative.Bool
	RemoveInputPort(id gdnative.Int)
	RemoveOutputPort(id gdnative.Int)
	SetInputPortName(id gdnative.Int, name gdnative.String)
	SetInputPortType(id gdnative.Int, aType gdnative.Int)
	SetInputs(inputs gdnative.String)
	SetOutputPortName(id gdnative.Int, name gdnative.String)
	SetOutputPortType(id gdnative.Int, aType gdnative.Int)
	SetOutputs(outputs gdnative.String)
	SetSize(size gdnative.Vector2)
}
