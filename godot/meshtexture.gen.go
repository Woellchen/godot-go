package godot

import (
	"github.com/Woellchen/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewMeshTextureFromPointer(ptr gdnative.Pointer) MeshTexture {
func newMeshTextureFromPointer(ptr gdnative.Pointer) MeshTexture {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := MeshTexture{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Simple texture that uses a mesh to draw itself. It's limited because flags can't be changed and region drawing is not supported.
*/
type MeshTexture struct {
	Texture
	owner gdnative.Object
}

func (o *MeshTexture) BaseClass() string {
	return "MeshTexture"
}

/*
        Undocumented
	Args: [], Returns: Texture
*/
func (o *MeshTexture) GetBaseTexture() TextureImplementer {
	// log.Println("Calling MeshTexture.GetBaseTexture()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MeshTexture", "get_base_texture")

	// Call the parent method.
	// Texture
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newTextureFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(TextureImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Texture" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(TextureImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [], Returns: Vector2
*/
func (o *MeshTexture) GetImageSize() gdnative.Vector2 {
	// log.Println("Calling MeshTexture.GetImageSize()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MeshTexture", "get_image_size")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Mesh
*/
func (o *MeshTexture) GetMesh() MeshImplementer {
	// log.Println("Calling MeshTexture.GetMesh()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MeshTexture", "get_mesh")

	// Call the parent method.
	// Mesh
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newMeshFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(MeshImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Mesh" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(MeshImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [{ false texture Texture}], Returns: void
*/
func (o *MeshTexture) SetBaseTexture(texture TextureImplementer) {
	// log.Println("Calling MeshTexture.SetBaseTexture()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(texture.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MeshTexture", "set_base_texture")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false size Vector2}], Returns: void
*/
func (o *MeshTexture) SetImageSize(size gdnative.Vector2) {
	// log.Println("Calling MeshTexture.SetImageSize()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector2(size)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MeshTexture", "set_image_size")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false mesh Mesh}], Returns: void
*/
func (o *MeshTexture) SetMesh(mesh MeshImplementer) {
	// log.Println("Calling MeshTexture.SetMesh()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(mesh.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MeshTexture", "set_mesh")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// MeshTextureImplementer is an interface that implements the methods
// of the MeshTexture class.
type MeshTextureImplementer interface {
	TextureImplementer
	GetBaseTexture() TextureImplementer
	GetImageSize() gdnative.Vector2
	GetMesh() MeshImplementer
	SetBaseTexture(texture TextureImplementer)
	SetImageSize(size gdnative.Vector2)
	SetMesh(mesh MeshImplementer)
}
