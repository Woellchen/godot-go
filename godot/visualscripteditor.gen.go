package godot

import (
	"github.com/Woellchen/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewvisualScriptEditorFromPointer(ptr gdnative.Pointer) visualScriptEditor {
func new_VisualScriptEditorFromPointer(ptr gdnative.Pointer) visualScriptEditor {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := visualScriptEditor{}
	obj.SetBaseObject(owner)

	return obj
}

func newSingletonVisualScriptEditor() *visualScriptEditor {
	return &visualScriptEditor{}
}

/*
   Undocumented
*/
var VisualScriptEditor = newSingletonVisualScriptEditor()

/*
Undocumented
*/
type visualScriptEditor struct {
	Object
	owner       gdnative.Object
	initialized bool
}

// EnsureSingleton will check to see if we have an object for it. If not, it will fetch its
// GDNative object and set it.
func (o *visualScriptEditor) ensureSingleton() {
	if o.initialized == true {
		return
	}
	//log.Println("Singleton not found. Fetching from GDNative...")
	base := gdnative.GetSingleton("VisualScriptEditor")
	o.SetBaseObject(base)
	o.initialized = true
}

func (o *visualScriptEditor) BaseClass() string {
	return "_VisualScriptEditor"
}

/*
        Undocumented
	Args: [{ false name String} { false category String} { false script Script}], Returns: void
*/
func (o *visualScriptEditor) AddCustomNode(name gdnative.String, category gdnative.String, script ScriptImplementer) {
	o.ensureSingleton()
	//log.Println("Calling _VisualScriptEditor.AddCustomNode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromString(name)
	ptrArguments[1] = gdnative.NewPointerFromString(category)
	ptrArguments[2] = gdnative.NewPointerFromObject(script.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_VisualScriptEditor", "add_custom_node")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false name String} { false category String}], Returns: void
*/
func (o *visualScriptEditor) RemoveCustomNode(name gdnative.String, category gdnative.String) {
	o.ensureSingleton()
	//log.Println("Calling _VisualScriptEditor.RemoveCustomNode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(name)
	ptrArguments[1] = gdnative.NewPointerFromString(category)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_VisualScriptEditor", "remove_custom_node")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// VisualScriptEditorImplementer is an interface that implements the methods
// of the VisualScriptEditor class.
type VisualScriptEditorImplementer interface {
	ObjectImplementer
	AddCustomNode(name gdnative.String, category gdnative.String, script ScriptImplementer)
	RemoveCustomNode(name gdnative.String, category gdnative.String)
}
