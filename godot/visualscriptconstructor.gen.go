package godot

import (
	"github.com/Woellchen/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewVisualScriptConstructorFromPointer(ptr gdnative.Pointer) VisualScriptConstructor {
func newVisualScriptConstructorFromPointer(ptr gdnative.Pointer) VisualScriptConstructor {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := VisualScriptConstructor{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Undocumented
*/
type VisualScriptConstructor struct {
	VisualScriptNode
	owner gdnative.Object
}

func (o *VisualScriptConstructor) BaseClass() string {
	return "VisualScriptConstructor"
}

/*
        Undocumented
	Args: [], Returns: Dictionary
*/
func (o *VisualScriptConstructor) GetConstructor() gdnative.Dictionary {
	//log.Println("Calling VisualScriptConstructor.GetConstructor()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualScriptConstructor", "get_constructor")

	// Call the parent method.
	// Dictionary
	retPtr := gdnative.NewEmptyDictionary()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewDictionaryFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: enum.Variant::Type
*/
func (o *VisualScriptConstructor) GetConstructorType() gdnative.VariantType {
	//log.Println("Calling VisualScriptConstructor.GetConstructorType()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualScriptConstructor", "get_constructor_type")

	// Call the parent method.
	// enum.Variant::Type
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return gdnative.VariantType(ret)
}

/*
        Undocumented
	Args: [{ false constructor Dictionary}], Returns: void
*/
func (o *VisualScriptConstructor) SetConstructor(constructor gdnative.Dictionary) {
	//log.Println("Calling VisualScriptConstructor.SetConstructor()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromDictionary(constructor)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualScriptConstructor", "set_constructor")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false type int}], Returns: void
*/
func (o *VisualScriptConstructor) SetConstructorType(aType gdnative.Int) {
	//log.Println("Calling VisualScriptConstructor.SetConstructorType()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(aType)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualScriptConstructor", "set_constructor_type")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// VisualScriptConstructorImplementer is an interface that implements the methods
// of the VisualScriptConstructor class.
type VisualScriptConstructorImplementer interface {
	VisualScriptNodeImplementer
	GetConstructor() gdnative.Dictionary
	SetConstructor(constructor gdnative.Dictionary)
	SetConstructorType(aType gdnative.Int)
}
