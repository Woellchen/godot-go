package godot

import (
	"github.com/Woellchen/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewSpringArmFromPointer(ptr gdnative.Pointer) SpringArm {
func newSpringArmFromPointer(ptr gdnative.Pointer) SpringArm {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := SpringArm{}
	obj.SetBaseObject(owner)

	return obj
}

/*
The SpringArm node is a node that casts a ray (or collision shape) along its z axis and moves all its direct children to the collision point, minus a margin. The most common use case for this is to make a 3rd person camera that reacts to collisions in the environment. The SpringArm will either cast a ray, or if a shape is given, it will cast the shape in the direction of its z axis. If you use the SpringArm as a camera controller for your player, you might need to exclude the player's collider from the SpringArm's collision check.
*/
type SpringArm struct {
	Spatial
	owner gdnative.Object
}

func (o *SpringArm) BaseClass() string {
	return "SpringArm"
}

/*
        Adds the [PhysicsBody] object with the given [RID] to the list of [PhysicsBody] objects excluded from the collision check.
	Args: [{ false RID RID}], Returns: void
*/
func (o *SpringArm) AddExcludedObject(rid gdnative.Rid) {
	//log.Println("Calling SpringArm.AddExcludedObject()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(rid)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SpringArm", "add_excluded_object")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Clears the list of [PhysicsBody] objects excluded from the collision check.
	Args: [], Returns: void
*/
func (o *SpringArm) ClearExcludedObjects() {
	//log.Println("Calling SpringArm.ClearExcludedObjects()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SpringArm", "clear_excluded_objects")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *SpringArm) GetCollisionMask() gdnative.Int {
	//log.Println("Calling SpringArm.GetCollisionMask()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SpringArm", "get_collision_mask")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns the proportion between the current arm length (after checking for collisions) and the [member spring_length]. Ranges from 0 to 1.
	Args: [], Returns: float
*/
func (o *SpringArm) GetHitLength() gdnative.Real {
	//log.Println("Calling SpringArm.GetHitLength()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SpringArm", "get_hit_length")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *SpringArm) GetLength() gdnative.Real {
	//log.Println("Calling SpringArm.GetLength()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SpringArm", "get_length")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *SpringArm) GetMargin() gdnative.Real {
	//log.Println("Calling SpringArm.GetMargin()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SpringArm", "get_margin")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Shape
*/
func (o *SpringArm) GetShape() ShapeImplementer {
	//log.Println("Calling SpringArm.GetShape()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SpringArm", "get_shape")

	// Call the parent method.
	// Shape
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newShapeFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(ShapeImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Shape" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(ShapeImplementer)
	}

	return &ret
}

/*
        Removes the given [RID] from the list of [PhysicsBody] objects excluded from the collision check.
	Args: [{ false RID RID}], Returns: bool
*/
func (o *SpringArm) RemoveExcludedObject(rid gdnative.Rid) gdnative.Bool {
	//log.Println("Calling SpringArm.RemoveExcludedObject()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(rid)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SpringArm", "remove_excluded_object")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false mask int}], Returns: void
*/
func (o *SpringArm) SetCollisionMask(mask gdnative.Int) {
	//log.Println("Calling SpringArm.SetCollisionMask()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(mask)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SpringArm", "set_collision_mask")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false length float}], Returns: void
*/
func (o *SpringArm) SetLength(length gdnative.Real) {
	//log.Println("Calling SpringArm.SetLength()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(length)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SpringArm", "set_length")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false margin float}], Returns: void
*/
func (o *SpringArm) SetMargin(margin gdnative.Real) {
	//log.Println("Calling SpringArm.SetMargin()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(margin)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SpringArm", "set_margin")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false shape Shape}], Returns: void
*/
func (o *SpringArm) SetShape(shape ShapeImplementer) {
	//log.Println("Calling SpringArm.SetShape()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(shape.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SpringArm", "set_shape")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// SpringArmImplementer is an interface that implements the methods
// of the SpringArm class.
type SpringArmImplementer interface {
	SpatialImplementer
	AddExcludedObject(rid gdnative.Rid)
	ClearExcludedObjects()
	GetCollisionMask() gdnative.Int
	GetHitLength() gdnative.Real
	GetLength() gdnative.Real
	GetMargin() gdnative.Real
	GetShape() ShapeImplementer
	RemoveExcludedObject(rid gdnative.Rid) gdnative.Bool
	SetCollisionMask(mask gdnative.Int)
	SetLength(length gdnative.Real)
	SetMargin(margin gdnative.Real)
	SetShape(shape ShapeImplementer)
}
