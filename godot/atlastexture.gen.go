package godot

import (
	"github.com/Woellchen/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewAtlasTextureFromPointer(ptr gdnative.Pointer) AtlasTexture {
func newAtlasTextureFromPointer(ptr gdnative.Pointer) AtlasTexture {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := AtlasTexture{}
	obj.SetBaseObject(owner)

	return obj
}

/*
[Texture] resource aimed at managing big textures files that pack multiple smaller textures. Consists of a [Texture], a margin that defines the border width, and a region that defines the actual area of the AtlasTexture.
*/
type AtlasTexture struct {
	Texture
	owner gdnative.Object
}

func (o *AtlasTexture) BaseClass() string {
	return "AtlasTexture"
}

/*
        Undocumented
	Args: [], Returns: Texture
*/
func (o *AtlasTexture) GetAtlas() TextureImplementer {
	//log.Println("Calling AtlasTexture.GetAtlas()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AtlasTexture", "get_atlas")

	// Call the parent method.
	// Texture
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newTextureFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(TextureImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Texture" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(TextureImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [], Returns: Rect2
*/
func (o *AtlasTexture) GetMargin() gdnative.Rect2 {
	//log.Println("Calling AtlasTexture.GetMargin()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AtlasTexture", "get_margin")

	// Call the parent method.
	// Rect2
	retPtr := gdnative.NewEmptyRect2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRect2FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Rect2
*/
func (o *AtlasTexture) GetRegion() gdnative.Rect2 {
	//log.Println("Calling AtlasTexture.GetRegion()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AtlasTexture", "get_region")

	// Call the parent method.
	// Rect2
	retPtr := gdnative.NewEmptyRect2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRect2FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *AtlasTexture) HasFilterClip() gdnative.Bool {
	//log.Println("Calling AtlasTexture.HasFilterClip()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AtlasTexture", "has_filter_clip")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false atlas Texture}], Returns: void
*/
func (o *AtlasTexture) SetAtlas(atlas TextureImplementer) {
	//log.Println("Calling AtlasTexture.SetAtlas()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(atlas.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AtlasTexture", "set_atlas")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *AtlasTexture) SetFilterClip(enable gdnative.Bool) {
	//log.Println("Calling AtlasTexture.SetFilterClip()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AtlasTexture", "set_filter_clip")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false margin Rect2}], Returns: void
*/
func (o *AtlasTexture) SetMargin(margin gdnative.Rect2) {
	//log.Println("Calling AtlasTexture.SetMargin()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRect2(margin)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AtlasTexture", "set_margin")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false region Rect2}], Returns: void
*/
func (o *AtlasTexture) SetRegion(region gdnative.Rect2) {
	//log.Println("Calling AtlasTexture.SetRegion()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRect2(region)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AtlasTexture", "set_region")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// AtlasTextureImplementer is an interface that implements the methods
// of the AtlasTexture class.
type AtlasTextureImplementer interface {
	TextureImplementer
	GetAtlas() TextureImplementer
	GetMargin() gdnative.Rect2
	GetRegion() gdnative.Rect2
	HasFilterClip() gdnative.Bool
	SetAtlas(atlas TextureImplementer)
	SetFilterClip(enable gdnative.Bool)
	SetMargin(margin gdnative.Rect2)
	SetRegion(region gdnative.Rect2)
}
