package godot

import (
	"github.com/Woellchen/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewRegExFromPointer(ptr gdnative.Pointer) RegEx {
func newRegExFromPointer(ptr gdnative.Pointer) RegEx {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := RegEx{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Undocumented
*/
type RegEx struct {
	Reference
	owner gdnative.Object
}

func (o *RegEx) BaseClass() string {
	return "RegEx"
}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *RegEx) Clear() {
	//log.Println("Calling RegEx.Clear()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RegEx", "clear")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false pattern String}], Returns: enum.Error
*/
func (o *RegEx) Compile(pattern gdnative.String) gdnative.Error {
	//log.Println("Calling RegEx.Compile()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(pattern)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RegEx", "compile")

	// Call the parent method.
	// enum.Error
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return gdnative.Error(ret)
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *RegEx) GetGroupCount() gdnative.Int {
	//log.Println("Calling RegEx.GetGroupCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RegEx", "get_group_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Array
*/
func (o *RegEx) GetNames() gdnative.Array {
	//log.Println("Calling RegEx.GetNames()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RegEx", "get_names")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: String
*/
func (o *RegEx) GetPattern() gdnative.String {
	//log.Println("Calling RegEx.GetPattern()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RegEx", "get_pattern")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *RegEx) IsValid() gdnative.Bool {
	//log.Println("Calling RegEx.IsValid()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RegEx", "is_valid")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false subject String} {0 true offset int} {-1 true end int}], Returns: RegExMatch
*/
func (o *RegEx) Search(subject gdnative.String, offset gdnative.Int, end gdnative.Int) RegExMatchImplementer {
	//log.Println("Calling RegEx.Search()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromString(subject)
	ptrArguments[1] = gdnative.NewPointerFromInt(offset)
	ptrArguments[2] = gdnative.NewPointerFromInt(end)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RegEx", "search")

	// Call the parent method.
	// RegExMatch
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newRegExMatchFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(RegExMatchImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "RegExMatch" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(RegExMatchImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [{ false subject String} {0 true offset int} {-1 true end int}], Returns: Array
*/
func (o *RegEx) SearchAll(subject gdnative.String, offset gdnative.Int, end gdnative.Int) gdnative.Array {
	//log.Println("Calling RegEx.SearchAll()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromString(subject)
	ptrArguments[1] = gdnative.NewPointerFromInt(offset)
	ptrArguments[2] = gdnative.NewPointerFromInt(end)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RegEx", "search_all")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false subject String} { false replacement String} {False true all bool} {0 true offset int} {-1 true end int}], Returns: String
*/
func (o *RegEx) Sub(subject gdnative.String, replacement gdnative.String, all gdnative.Bool, offset gdnative.Int, end gdnative.Int) gdnative.String {
	//log.Println("Calling RegEx.Sub()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 5, 5)
	ptrArguments[0] = gdnative.NewPointerFromString(subject)
	ptrArguments[1] = gdnative.NewPointerFromString(replacement)
	ptrArguments[2] = gdnative.NewPointerFromBool(all)
	ptrArguments[3] = gdnative.NewPointerFromInt(offset)
	ptrArguments[4] = gdnative.NewPointerFromInt(end)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RegEx", "sub")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

// RegExImplementer is an interface that implements the methods
// of the RegEx class.
type RegExImplementer interface {
	ReferenceImplementer
	Clear()
	GetGroupCount() gdnative.Int
	GetNames() gdnative.Array
	GetPattern() gdnative.String
	IsValid() gdnative.Bool
	Search(subject gdnative.String, offset gdnative.Int, end gdnative.Int) RegExMatchImplementer
	SearchAll(subject gdnative.String, offset gdnative.Int, end gdnative.Int) gdnative.Array
	Sub(subject gdnative.String, replacement gdnative.String, all gdnative.Bool, offset gdnative.Int, end gdnative.Int) gdnative.String
}
