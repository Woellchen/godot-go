package godot

import (
	"github.com/Woellchen/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewWorldFromPointer(ptr gdnative.Pointer) World {
func newWorldFromPointer(ptr gdnative.Pointer) World {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := World{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Class that has everything pertaining to a world. A physics space, a visual scenario and a sound space. Spatial nodes register their resources into the current world.
*/
type World struct {
	Resource
	owner gdnative.Object
}

func (o *World) BaseClass() string {
	return "World"
}

/*
        Undocumented
	Args: [], Returns: PhysicsDirectSpaceState
*/
func (o *World) GetDirectSpaceState() PhysicsDirectSpaceStateImplementer {
	//log.Println("Calling World.GetDirectSpaceState()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("World", "get_direct_space_state")

	// Call the parent method.
	// PhysicsDirectSpaceState
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newPhysicsDirectSpaceStateFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(PhysicsDirectSpaceStateImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "PhysicsDirectSpaceState" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(PhysicsDirectSpaceStateImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [], Returns: Environment
*/
func (o *World) GetEnvironment() EnvironmentImplementer {
	//log.Println("Calling World.GetEnvironment()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("World", "get_environment")

	// Call the parent method.
	// Environment
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newEnvironmentFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(EnvironmentImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Environment" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(EnvironmentImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [], Returns: Environment
*/
func (o *World) GetFallbackEnvironment() EnvironmentImplementer {
	//log.Println("Calling World.GetFallbackEnvironment()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("World", "get_fallback_environment")

	// Call the parent method.
	// Environment
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newEnvironmentFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(EnvironmentImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Environment" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(EnvironmentImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [], Returns: RID
*/
func (o *World) GetScenario() gdnative.Rid {
	//log.Println("Calling World.GetScenario()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("World", "get_scenario")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: RID
*/
func (o *World) GetSpace() gdnative.Rid {
	//log.Println("Calling World.GetSpace()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("World", "get_space")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false env Environment}], Returns: void
*/
func (o *World) SetEnvironment(env EnvironmentImplementer) {
	//log.Println("Calling World.SetEnvironment()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(env.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("World", "set_environment")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false env Environment}], Returns: void
*/
func (o *World) SetFallbackEnvironment(env EnvironmentImplementer) {
	//log.Println("Calling World.SetFallbackEnvironment()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(env.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("World", "set_fallback_environment")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// WorldImplementer is an interface that implements the methods
// of the World class.
type WorldImplementer interface {
	ResourceImplementer
	GetDirectSpaceState() PhysicsDirectSpaceStateImplementer
	GetEnvironment() EnvironmentImplementer
	GetFallbackEnvironment() EnvironmentImplementer
	GetScenario() gdnative.Rid
	GetSpace() gdnative.Rid
	SetEnvironment(env EnvironmentImplementer)
	SetFallbackEnvironment(env EnvironmentImplementer)
}
