package godot

import (
	"github.com/Woellchen/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewSkinFromPointer(ptr gdnative.Pointer) Skin {
func newSkinFromPointer(ptr gdnative.Pointer) Skin {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := Skin{}
	obj.SetBaseObject(owner)

	return obj
}

/*

 */
type Skin struct {
	Resource
	owner gdnative.Object
}

func (o *Skin) BaseClass() string {
	return "Skin"
}

/*

	Args: [{ false bone int} { false pose Transform}], Returns: void
*/
func (o *Skin) AddBind(bone gdnative.Int, pose gdnative.Transform) {
	//log.Println("Calling Skin.AddBind()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(bone)
	ptrArguments[1] = gdnative.NewPointerFromTransform(pose)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skin", "add_bind")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [], Returns: void
*/
func (o *Skin) ClearBinds() {
	//log.Println("Calling Skin.ClearBinds()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skin", "clear_binds")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false bind_index int}], Returns: int
*/
func (o *Skin) GetBindBone(bindIndex gdnative.Int) gdnative.Int {
	//log.Println("Calling Skin.GetBindBone()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(bindIndex)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skin", "get_bind_bone")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*

	Args: [], Returns: int
*/
func (o *Skin) GetBindCount() gdnative.Int {
	//log.Println("Calling Skin.GetBindCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skin", "get_bind_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false bind_index int}], Returns: String
*/
func (o *Skin) GetBindName(bindIndex gdnative.Int) gdnative.String {
	//log.Println("Calling Skin.GetBindName()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(bindIndex)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skin", "get_bind_name")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false bind_index int}], Returns: Transform
*/
func (o *Skin) GetBindPose(bindIndex gdnative.Int) gdnative.Transform {
	//log.Println("Calling Skin.GetBindPose()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(bindIndex)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skin", "get_bind_pose")

	// Call the parent method.
	// Transform
	retPtr := gdnative.NewEmptyTransform()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewTransformFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false bind_index int} { false bone int}], Returns: void
*/
func (o *Skin) SetBindBone(bindIndex gdnative.Int, bone gdnative.Int) {
	//log.Println("Calling Skin.SetBindBone()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(bindIndex)
	ptrArguments[1] = gdnative.NewPointerFromInt(bone)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skin", "set_bind_bone")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false bind_count int}], Returns: void
*/
func (o *Skin) SetBindCount(bindCount gdnative.Int) {
	//log.Println("Calling Skin.SetBindCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(bindCount)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skin", "set_bind_count")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false bind_index int} { false name String}], Returns: void
*/
func (o *Skin) SetBindName(bindIndex gdnative.Int, name gdnative.String) {
	//log.Println("Calling Skin.SetBindName()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(bindIndex)
	ptrArguments[1] = gdnative.NewPointerFromString(name)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skin", "set_bind_name")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false bind_index int} { false pose Transform}], Returns: void
*/
func (o *Skin) SetBindPose(bindIndex gdnative.Int, pose gdnative.Transform) {
	//log.Println("Calling Skin.SetBindPose()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(bindIndex)
	ptrArguments[1] = gdnative.NewPointerFromTransform(pose)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skin", "set_bind_pose")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// SkinImplementer is an interface that implements the methods
// of the Skin class.
type SkinImplementer interface {
	ResourceImplementer
	AddBind(bone gdnative.Int, pose gdnative.Transform)
	ClearBinds()
	GetBindBone(bindIndex gdnative.Int) gdnative.Int
	GetBindCount() gdnative.Int
	GetBindName(bindIndex gdnative.Int) gdnative.String
	GetBindPose(bindIndex gdnative.Int) gdnative.Transform
	SetBindBone(bindIndex gdnative.Int, bone gdnative.Int)
	SetBindCount(bindCount gdnative.Int)
	SetBindName(bindIndex gdnative.Int, name gdnative.String)
	SetBindPose(bindIndex gdnative.Int, pose gdnative.Transform)
}
