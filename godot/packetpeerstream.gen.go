package godot

import (
	"github.com/Woellchen/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewPacketPeerStreamFromPointer(ptr gdnative.Pointer) PacketPeerStream {
func newPacketPeerStreamFromPointer(ptr gdnative.Pointer) PacketPeerStream {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := PacketPeerStream{}
	obj.SetBaseObject(owner)

	return obj
}

/*
PacketStreamPeer provides a wrapper for working using packets over a stream. This allows for using packet based code with StreamPeers. PacketPeerStream implements a custom protocol over the StreamPeer, so the user should not read or write to the wrapped StreamPeer directly.
*/
type PacketPeerStream struct {
	PacketPeer
	owner gdnative.Object
}

func (o *PacketPeerStream) BaseClass() string {
	return "PacketPeerStream"
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *PacketPeerStream) GetInputBufferMaxSize() gdnative.Int {
	// log.Println("Calling PacketPeerStream.GetInputBufferMaxSize()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PacketPeerStream", "get_input_buffer_max_size")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *PacketPeerStream) GetOutputBufferMaxSize() gdnative.Int {
	// log.Println("Calling PacketPeerStream.GetOutputBufferMaxSize()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PacketPeerStream", "get_output_buffer_max_size")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: StreamPeer
*/
func (o *PacketPeerStream) GetStreamPeer() StreamPeerImplementer {
	// log.Println("Calling PacketPeerStream.GetStreamPeer()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PacketPeerStream", "get_stream_peer")

	// Call the parent method.
	// StreamPeer
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newStreamPeerFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(StreamPeerImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "StreamPeer" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(StreamPeerImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [{ false max_size_bytes int}], Returns: void
*/
func (o *PacketPeerStream) SetInputBufferMaxSize(maxSizeBytes gdnative.Int) {
	// log.Println("Calling PacketPeerStream.SetInputBufferMaxSize()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(maxSizeBytes)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PacketPeerStream", "set_input_buffer_max_size")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false max_size_bytes int}], Returns: void
*/
func (o *PacketPeerStream) SetOutputBufferMaxSize(maxSizeBytes gdnative.Int) {
	// log.Println("Calling PacketPeerStream.SetOutputBufferMaxSize()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(maxSizeBytes)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PacketPeerStream", "set_output_buffer_max_size")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false peer StreamPeer}], Returns: void
*/
func (o *PacketPeerStream) SetStreamPeer(peer StreamPeerImplementer) {
	// log.Println("Calling PacketPeerStream.SetStreamPeer()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(peer.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PacketPeerStream", "set_stream_peer")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// PacketPeerStreamImplementer is an interface that implements the methods
// of the PacketPeerStream class.
type PacketPeerStreamImplementer interface {
	PacketPeerImplementer
	GetInputBufferMaxSize() gdnative.Int
	GetOutputBufferMaxSize() gdnative.Int
	GetStreamPeer() StreamPeerImplementer
	SetInputBufferMaxSize(maxSizeBytes gdnative.Int)
	SetOutputBufferMaxSize(maxSizeBytes gdnative.Int)
	SetStreamPeer(peer StreamPeerImplementer)
}
