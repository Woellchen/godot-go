package godot

import (
	"github.com/Woellchen/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewUDPServerFromPointer(ptr gdnative.Pointer) UDPServer {
func newUDPServerFromPointer(ptr gdnative.Pointer) UDPServer {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := UDPServer{}
	obj.SetBaseObject(owner)

	return obj
}

/*
A simple server that opens a UDP socket and returns connected [PacketPeerUDP] upon receiving new packets. See also [method PacketPeerUDP.connect_to_host]. Below a small example of how it can be used: [codeblock] # server.gd extends Node var server := UDPServer.new() var peers = [] func _ready(): server.listen(4242) func _process(delta): if server.is_connection_available(): var peer : PacketPeerUDP = server.take_connection() var pkt = peer.get_packet() print("Accepted peer: %s:%s" % [peer.get_packet_ip(), peer.get_packet_port()]) print("Received data: %s" % [pkt.get_string_from_utf8()]) # Reply so it knows we received the message. peer.put_packet(pkt) # Keep a reference so we can keep contacting the remote peer. peers.append(peer) for i in range(0, peers.size()): pass # Do something with the connected peers. [/codeblock] [codeblock] # client.gd extends Node var udp := PacketPeerUDP.new() var connected = false func _ready(): udp.connect_to_host("127.0.0.1", 4242) func _process(delta): if !connected: # Try to contact server udp.put_packet("The answer is... 42!".to_utf8()) if udp.get_available_packet_count() > 0: print("Connected: %s" % udp.get_packet().get_string_from_utf8()) connected = true [/codeblock]
*/
type UDPServer struct {
	Reference
	owner gdnative.Object
}

func (o *UDPServer) BaseClass() string {
	return "UDPServer"
}

/*
        Returns [code]true[/code] if a packet with a new address/port combination is received on the socket.
	Args: [], Returns: bool
*/
func (o *UDPServer) IsConnectionAvailable() gdnative.Bool {
	// log.Println("Calling UDPServer.IsConnectionAvailable()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("UDPServer", "is_connection_available")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if the socket is open and listening on a port.
	Args: [], Returns: bool
*/
func (o *UDPServer) IsListening() gdnative.Bool {
	// log.Println("Calling UDPServer.IsListening()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("UDPServer", "is_listening")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Starts the server by opening a UDP socket listening on the given port. You can optionally specify a [code]bind_address[/code] to only listen for packets sent to that address. See also [method PacketPeerUDP.listen].
	Args: [{ false port int} {* true bind_address String}], Returns: enum.Error
*/
func (o *UDPServer) Listen(port gdnative.Int, bindAddress gdnative.String) gdnative.Error {
	// log.Println("Calling UDPServer.Listen()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(port)
	ptrArguments[1] = gdnative.NewPointerFromString(bindAddress)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("UDPServer", "listen")

	// Call the parent method.
	// enum.Error
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return gdnative.Error(ret)
}

/*
        Stops the server, closing the UDP socket if open. Will not disconnect any connected [PacketPeerUDP].
	Args: [], Returns: void
*/
func (o *UDPServer) Stop() {
	// log.Println("Calling UDPServer.Stop()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("UDPServer", "stop")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Returns a [PacketPeerUDP] connected to the address/port combination of the first packet in queue. Will return [code]null[/code] if no packet is in queue. See also [method PacketPeerUDP.connect_to_host].
	Args: [], Returns: PacketPeerUDP
*/
func (o *UDPServer) TakeConnection() PacketPeerUDPImplementer {
	// log.Println("Calling UDPServer.TakeConnection()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("UDPServer", "take_connection")

	// Call the parent method.
	// PacketPeerUDP
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newPacketPeerUDPFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(PacketPeerUDPImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "PacketPeerUDP" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(PacketPeerUDPImplementer)
	}

	return &ret
}

// UDPServerImplementer is an interface that implements the methods
// of the UDPServer class.
type UDPServerImplementer interface {
	ReferenceImplementer
	IsConnectionAvailable() gdnative.Bool
	IsListening() gdnative.Bool
	Stop()
	TakeConnection() PacketPeerUDPImplementer
}
