package godot

import (
	"github.com/Woellchen/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewWebSocketServerFromPointer(ptr gdnative.Pointer) WebSocketServer {
func newWebSocketServerFromPointer(ptr gdnative.Pointer) WebSocketServer {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := WebSocketServer{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Undocumented
*/
type WebSocketServer struct {
	WebSocketMultiplayerPeer
	owner gdnative.Object
}

func (o *WebSocketServer) BaseClass() string {
	return "WebSocketServer"
}

/*
        Undocumented
	Args: [{ false id int} {1000 true code int} { true reason String}], Returns: void
*/
func (o *WebSocketServer) DisconnectPeer(id gdnative.Int, code gdnative.Int, reason gdnative.String) {
	// log.Println("Calling WebSocketServer.DisconnectPeer()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)
	ptrArguments[1] = gdnative.NewPointerFromInt(code)
	ptrArguments[2] = gdnative.NewPointerFromString(reason)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("WebSocketServer", "disconnect_peer")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: String
*/
func (o *WebSocketServer) GetBindIp() gdnative.String {
	// log.Println("Calling WebSocketServer.GetBindIp()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("WebSocketServer", "get_bind_ip")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: X509Certificate
*/
func (o *WebSocketServer) GetCaChain() X509CertificateImplementer {
	// log.Println("Calling WebSocketServer.GetCaChain()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("WebSocketServer", "get_ca_chain")

	// Call the parent method.
	// X509Certificate
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newX509CertificateFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(X509CertificateImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "X509Certificate" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(X509CertificateImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [{ false id int}], Returns: String
*/
func (o *WebSocketServer) GetPeerAddress(id gdnative.Int) gdnative.String {
	// log.Println("Calling WebSocketServer.GetPeerAddress()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("WebSocketServer", "get_peer_address")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false id int}], Returns: int
*/
func (o *WebSocketServer) GetPeerPort(id gdnative.Int) gdnative.Int {
	// log.Println("Calling WebSocketServer.GetPeerPort()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("WebSocketServer", "get_peer_port")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: CryptoKey
*/
func (o *WebSocketServer) GetPrivateKey() CryptoKeyImplementer {
	// log.Println("Calling WebSocketServer.GetPrivateKey()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("WebSocketServer", "get_private_key")

	// Call the parent method.
	// CryptoKey
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newCryptoKeyFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(CryptoKeyImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "CryptoKey" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(CryptoKeyImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [], Returns: X509Certificate
*/
func (o *WebSocketServer) GetSslCertificate() X509CertificateImplementer {
	// log.Println("Calling WebSocketServer.GetSslCertificate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("WebSocketServer", "get_ssl_certificate")

	// Call the parent method.
	// X509Certificate
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newX509CertificateFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(X509CertificateImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "X509Certificate" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(X509CertificateImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [{ false id int}], Returns: bool
*/
func (o *WebSocketServer) HasPeer(id gdnative.Int) gdnative.Bool {
	// log.Println("Calling WebSocketServer.HasPeer()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("WebSocketServer", "has_peer")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *WebSocketServer) IsListening() gdnative.Bool {
	// log.Println("Calling WebSocketServer.IsListening()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("WebSocketServer", "is_listening")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false port int} {[] true protocols PoolStringArray} {False true gd_mp_api bool}], Returns: enum.Error
*/
func (o *WebSocketServer) Listen(port gdnative.Int, protocols gdnative.PoolStringArray, gdMpApi gdnative.Bool) gdnative.Error {
	// log.Println("Calling WebSocketServer.Listen()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromInt(port)
	ptrArguments[1] = gdnative.NewPointerFromPoolStringArray(protocols)
	ptrArguments[2] = gdnative.NewPointerFromBool(gdMpApi)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("WebSocketServer", "listen")

	// Call the parent method.
	// enum.Error
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return gdnative.Error(ret)
}

/*
        Undocumented
	Args: [{ false arg0 String}], Returns: void
*/
func (o *WebSocketServer) SetBindIp(arg0 gdnative.String) {
	// log.Println("Calling WebSocketServer.SetBindIp()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(arg0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("WebSocketServer", "set_bind_ip")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 X509Certificate}], Returns: void
*/
func (o *WebSocketServer) SetCaChain(arg0 X509CertificateImplementer) {
	// log.Println("Calling WebSocketServer.SetCaChain()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(arg0.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("WebSocketServer", "set_ca_chain")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 CryptoKey}], Returns: void
*/
func (o *WebSocketServer) SetPrivateKey(arg0 CryptoKeyImplementer) {
	// log.Println("Calling WebSocketServer.SetPrivateKey()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(arg0.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("WebSocketServer", "set_private_key")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 X509Certificate}], Returns: void
*/
func (o *WebSocketServer) SetSslCertificate(arg0 X509CertificateImplementer) {
	// log.Println("Calling WebSocketServer.SetSslCertificate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(arg0.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("WebSocketServer", "set_ssl_certificate")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *WebSocketServer) Stop() {
	// log.Println("Calling WebSocketServer.Stop()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("WebSocketServer", "stop")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// WebSocketServerImplementer is an interface that implements the methods
// of the WebSocketServer class.
type WebSocketServerImplementer interface {
	WebSocketMultiplayerPeerImplementer
	DisconnectPeer(id gdnative.Int, code gdnative.Int, reason gdnative.String)
	GetBindIp() gdnative.String
	GetCaChain() X509CertificateImplementer
	GetPeerAddress(id gdnative.Int) gdnative.String
	GetPeerPort(id gdnative.Int) gdnative.Int
	GetPrivateKey() CryptoKeyImplementer
	GetSslCertificate() X509CertificateImplementer
	HasPeer(id gdnative.Int) gdnative.Bool
	IsListening() gdnative.Bool
	SetBindIp(arg0 gdnative.String)
	SetCaChain(arg0 X509CertificateImplementer)
	SetPrivateKey(arg0 CryptoKeyImplementer)
	SetSslCertificate(arg0 X509CertificateImplementer)
	Stop()
}
