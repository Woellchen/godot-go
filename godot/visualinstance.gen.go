package godot

import (
	"github.com/Woellchen/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewVisualInstanceFromPointer(ptr gdnative.Pointer) VisualInstance {
func newVisualInstanceFromPointer(ptr gdnative.Pointer) VisualInstance {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := VisualInstance{}
	obj.SetBaseObject(owner)

	return obj
}

/*
The [VisualInstance] is used to connect a resource to a visual representation. All visual 3D nodes inherit from the [VisualInstance]. In general, you should not access the [VisualInstance] properties directly as they are accessed and managed by the nodes that inherit from [VisualInstance]. [VisualInstance] is the node representation of the [VisualServer] instance.
*/
type VisualInstance struct {
	Spatial
	owner gdnative.Object
}

func (o *VisualInstance) BaseClass() string {
	return "VisualInstance"
}

/*
        Undocumented
	Args: [], Returns: RID
*/
func (o *VisualInstance) X_GetVisualInstanceRid() gdnative.Rid {
	// log.Println("Calling VisualInstance.X_GetVisualInstanceRid()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualInstance", "_get_visual_instance_rid")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Returns the [AABB] (also known as the bounding box) for this [VisualInstance].
	Args: [], Returns: AABB
*/
func (o *VisualInstance) GetAabb() gdnative.Aabb {
	// log.Println("Calling VisualInstance.GetAabb()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualInstance", "get_aabb")

	// Call the parent method.
	// AABB
	retPtr := gdnative.NewEmptyAabb()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewAabbFromPointer(retPtr)
	return ret
}

/*
        Returns the RID of the resource associated with this [VisualInstance]. For example, if the Node is a [MeshInstance], this will return the RID of the associated [Mesh].
	Args: [], Returns: RID
*/
func (o *VisualInstance) GetBase() gdnative.Rid {
	// log.Println("Calling VisualInstance.GetBase()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualInstance", "get_base")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Returns the RID of this instance. This RID is the same as the RID returned by [method VisualServer.instance_create]. This RID is needed if you want to call [VisualServer] functions directly on this [VisualInstance].
	Args: [], Returns: RID
*/
func (o *VisualInstance) GetInstance() gdnative.Rid {
	// log.Println("Calling VisualInstance.GetInstance()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualInstance", "get_instance")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *VisualInstance) GetLayerMask() gdnative.Int {
	// log.Println("Calling VisualInstance.GetLayerMask()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualInstance", "get_layer_mask")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] when the specified layer is enabled in [member layers] and [code]false[/code] otherwise.
	Args: [{ false layer int}], Returns: bool
*/
func (o *VisualInstance) GetLayerMaskBit(layer gdnative.Int) gdnative.Bool {
	// log.Println("Calling VisualInstance.GetLayerMaskBit()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(layer)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualInstance", "get_layer_mask_bit")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns the transformed [AABB] (also known as the bounding box) for this [VisualInstance]. Transformed in this case means the [AABB] plus the position, rotation, and scale of the [Spatial]'s [Transform].
	Args: [], Returns: AABB
*/
func (o *VisualInstance) GetTransformedAabb() gdnative.Aabb {
	// log.Println("Calling VisualInstance.GetTransformedAabb()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualInstance", "get_transformed_aabb")

	// Call the parent method.
	// AABB
	retPtr := gdnative.NewEmptyAabb()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewAabbFromPointer(retPtr)
	return ret
}

/*
        Sets the resource that is instantiated by this [VisualInstance], which changes how the engine handles the [VisualInstance] under the hood. Equivalent to [method VisualServer.instance_set_base].
	Args: [{ false base RID}], Returns: void
*/
func (o *VisualInstance) SetBase(base gdnative.Rid) {
	// log.Println("Calling VisualInstance.SetBase()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(base)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualInstance", "set_base")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false mask int}], Returns: void
*/
func (o *VisualInstance) SetLayerMask(mask gdnative.Int) {
	// log.Println("Calling VisualInstance.SetLayerMask()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(mask)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualInstance", "set_layer_mask")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Enables a particular layer in [member layers].
	Args: [{ false layer int} { false enabled bool}], Returns: void
*/
func (o *VisualInstance) SetLayerMaskBit(layer gdnative.Int, enabled gdnative.Bool) {
	// log.Println("Calling VisualInstance.SetLayerMaskBit()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(layer)
	ptrArguments[1] = gdnative.NewPointerFromBool(enabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualInstance", "set_layer_mask_bit")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// VisualInstanceImplementer is an interface that implements the methods
// of the VisualInstance class.
type VisualInstanceImplementer interface {
	SpatialImplementer
	X_GetVisualInstanceRid() gdnative.Rid
	GetAabb() gdnative.Aabb
	GetBase() gdnative.Rid
	GetInstance() gdnative.Rid
	GetLayerMask() gdnative.Int
	GetLayerMaskBit(layer gdnative.Int) gdnative.Bool
	GetTransformedAabb() gdnative.Aabb
	SetBase(base gdnative.Rid)
	SetLayerMask(mask gdnative.Int)
	SetLayerMaskBit(layer gdnative.Int, enabled gdnative.Bool)
}
